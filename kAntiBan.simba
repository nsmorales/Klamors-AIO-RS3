//
// kAntiBan.simba
// Author: Klamor
// Updated: 12/6/17
//

{$include_once srl-6/srl.simba}
{$f-}

//
//  FOCUS : Inverse percentage of runtime that we lose focus of the client
//  FATIGUE : Percentage to factor when delaying actions
//  MSPEED : Adjusts SRL-6's mouseSpeed variable
//  RTIME : Time it takes to react to various changes
//

const
  minFocus = 0;                   //MIN CLIENT FOCUS %
  maxFocus = 100;                 //MAX CLIENT FOCUS %
  minFatigue = 0;                 //MIN PLAYER FATIGUE %
  maxFatigue = 100;               //MAX PLAYER FATIGUE %
  minmSpeed = 5;                  //MIN MOUSE SPEED
  maxmSpeed = 25;                 //MAX MOUSE SPEED
  minrTime = 250;                 //MIN REACTION TIME
  maxrTime = 900;                 //MAX REACTION TIME
  boredThreshold = (60000*13);    //MAX RUNTINE BEFORE BORED
  maxActivityTime = (60000 * 45); //MAX RUNTIME FOR ANY ACTIVITY

type
  kHuman = record
    mSpeed : extended;      //mouse speed var
    rTime : extended;       //reaction time var
    focus : extended;       //focus var
    fatigue : extended;     //fatigue var
    bored : boolean;        //bored (true/false)
  end;

var
  human: kHuman;

procedure kHuman.init(_mSpeed, _rTime, _focus, _fatigue: extended; _bored: boolean);
begin
  self.mSpeed := _mSpeed;
  self.rTime := _rTime;
  self.focus := _focus;
  self.fatigue := _fatigue;
  self.bored := _bored;
end;

procedure kHuman.print();
begin
  //writeLn('Player Settings:');
  writeLn('mSpeed: ', self.mSpeed, ' rTime: ', self.rTime, ' Focus: ', self.focus, ' Fatigue: ', self.fatigue);
  //writeLn('Is Bored: ', self.bored);
end;

procedure kHuman.defaultHuman();
begin
  human.init(20.0, 250.0, 100.0, 0.00, false);
end;

procedure kHuman.weaken();
begin
  self.focus := (self.focus - randomRange(5,10));                //lose 5-10% focus
    if (self.focus < minFocus) then self.focus := minFocus;
  self.fatigue := (self.fatigue + randomRange(5,10));            //add 5-10% fatigue
    if (self.fatigue > maxFatigue) then self.fatigue := maxFatigue;
  self.mSpeed := (self.mSpeed - randomRange(1,5));              //lose 1-5% mspeed
    if (self.mSpeed < minmSpeed) then self.mSpeed := minmSpeed;
    mouseSpeed := Floor(self.mSpeed);
  self.rTime :=  (self.rTime  + randomRange(75,250));                 //increase reaction time by 75-250ms
    if (self.rTime > maxrTime) then self.rTime := maxrTime;
end;

procedure kHuman.energize();
begin
  self.focus := (self.focus + randomRange(30,50));                //adds 30-50% focus
    if (self.focus > maxFocus) then self.focus := maxFocus;
  self.fatigue := (self.focus - randomRange(5,10));                    //lose 5-10% fatigue
    if (self.fatigue < minFatigue) then self.fatigue := minFatigue;
  self.mSpeed := (self.mSpeed + randomRange(15,20));                  //speeds up mouseSpeed by 15-20 interval
    if (self.mSpeed > maxmSpeed) then self.mSpeed := maxmSpeed;
      mouseSpeed := Floor(self.mSpeed);
  self.rTime := (self.rTime - randomRange(25,50));                    //subtracts 25-50ms from reaction time
    if (self.rTime < minrTime) then self.rTime := minrTime;
end;

procedure kHuman.randomize();
begin
  self.focus := randomRange(minFocus,maxFocus);
  self.fatigue := randomRange(minFatigue,maxFatigue);
  self.mSpeed := randomRange(minmSpeed,maxmSpeed);
  mouseSpeed := Floor(self.mSpeed);
  self.rTime := randomRange(minrTime,maxrTime);
end;

procedure kHuman.waitWhileCollecting();
var
  bagStart, bagEnd: integer;
begin
  if not tabBackpack.isOpen() then tabBackpack.open();
  bagStart := tabBackpack.count();
  if bagStart = 28 then exit;

end;
