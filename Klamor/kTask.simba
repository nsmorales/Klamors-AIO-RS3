//{$Include_once SRL-6-SIMBA1.2/SRL.simba}
{$Include_once SPS/lib/SPS-rs3.simba}
//{$include_once NAS/NAS.simba}
{$include_once Klamor/kOnScreenDisplay.simba}
{$Include_once Klamor/kGameObject.simba}
{$include_once Klamor/kCombat.simba}
{$include_once Klamor/kMisc.simba}
{$include_once Klamor/kExpTracker.simba}
{$f-}

type
  kTaskArea = record
    mapName     : String;            //SPS map name
    bankLoc     : TPointArray;       //Bank Location Polygon
    gatherLoc   : TPointArray;       //Gather Location Polygon
    objectLoc   : T2DPointArray;     //array of Object Location Polygon(s)
    toBank      : T2DPointArray;     //array of paths to self.bankLoc
    toGather    : T2DPointArray;     //array of paths to self.gatherLoc
    toObject    : T2DPointArray;     //array of paths to self.object[s]
    lodestone   : String;            //string of TaskArea lodestone (eg. 'Lumbridge')
  end;

  kTask = record             //stores information for tasks
    name        : string;
    area        : kTaskArea;
    skill       : Integer;
    minLevel    : Integer;
    maxLevel    : Integer;
    monster     : kMonster;
    tree        : kTree;
    ore         : kOre;
    wisp        : kWisp;
    fish        : kFish;
    loot        : kLoot;
    bank        : kBank;
  end;

//
//    Defined Task Areas
//
var
  GE, VarrockCourtyard, DraynorVillage, LumbridgeForrest, LumbridgeChickens, LumbridgeCows, LumbridgeGoblins,
  EdgevilleDungeonHillGiants, ChaosTunnelsMossGiants, ChaosTunnelsFireGiants, KaramjaFisher, SeersVillage,
  TaverlyDungeonBlueDragons, ForgottenCemetary, Canifis, FremennikSlayerDungeon: kTaskArea;

//
//    Defined Tasks
//
var
  //general
  fletchNstring, superHeat, highAlch,
  //end general

  //woodcutting
  treeCutArrows, oakCutArrows, willowCutArrows, mapleCutArrows, mapleCutShortbows, yewCutArrows,
  //end woodcutting

  //combat
  fightChickens, fightCows, fightGoblins, fightHillGiants, fightMossGiants, fightFireGiants,
  BlueDragonsTaverlyDungeon, BlueDragonsForgottenCemetary, fightGhouls, fightPyrefiends,
  //end combat

  //fishing
  fishTuna, fishLobster: kTask;
  //endfishing

procedure kTaskArea.init(_mapName: String; _bankLoc, _gatherLoc: TPointArray; _objectLoc: T2DPointArray;
                         _toBank, _toGather, _toObject: T2DPointArray; _lodestone: String);
begin
  self.mapName := _mapName;
  self.bankLoc := _bankLoc;
  self.gatherLoc := _gatherLoc;
  self.objectLoc := _objectLoc;
  self.toBank := _toBank;
  self.toGather := _toGather;
  self.toObject := _toObject;
  self.lodestone := _lodestone;
end;

procedure setupTaskAreas();
begin
  GE.init('Grand_Exchange',
         [(*bankLoc*)],
         [(*gatherLoc*)],
         [[(*objectLoc*)], [(*objectLoc*)]],
         [[(*toBank*)],[(*toBank*)]],
         [[(*toGather*)],[(*toGather*)]],
         [[(*toObject*)],[(*toObject*)]],
         'Varrock');
  VarrockCourtyard.init('Varrock_Courtyard',
                       [(*bankLoc*)],
                       [(*gatherLoc*)],
                       [[(*objectLoc*)], [(*objectLoc*)]],
                       [[(*toBank*)],[(*toBank*)]],
                       [[(*toGather*)],[(*toGather*)]],
                       [[(*toObject*)],[(*toObject*)]],
                       'Varrock');
  DraynorVillage.init('Draynor_Village',
                     [(*bankLoc*)[247, 147], [226, 150], [226, 171], [245, 174]],
                     [(*gatherLoc*)[177, 169], [239, 183], [229, 246], [181, 222]],
                     [[(*objectLoc*)], [(*objectLoc*)]],
                     [[(*toBank*)],[(*toBank*)]],
                     [[(*toGather*)],[(*toGather*)]],
                     [[(*toObject*)],[(*toObject*)]],
                     'Draynor');
  SeersVillage.init('Seers_Village',
                     [[366, 206], [364, 259], [432, 261], [433, 210]],
                     [[366, 206], [364, 259], [432, 261], [433, 210]],
                     [[(*objectLoc*)], [(*objectLoc*)]],
                     [[[396, 227], [411, 228], [425, 247], [424, 269], [411, 282], [398, 276],
                      [398, 260], [406, 258]],[]],
                     [[[406, 258], [398, 260], [398, 276], [411, 282], [424, 269], [425, 247],
                      [411, 228], [396, 227]],[(*toGather*)]],
                     [[(*toObject*)],[(*toObject*)]],
                     'Seers');
  LumbridgeForrest.init('Lumbridge_Forrest',
                       [(*bankLoc*)],
                       [(*gatherLoc*)],
                       [[(*objectLoc*)], [(*objectLoc*)]],
                       [[(*toBank*)],[(*toBank*)]],
                       [[(*toGather*)],[(*toGather*)]],
                       [[(*toObject*)],[(*toObject*)]],
                       'Lumbridge');
  LumbridgeChickens.init('Lumbridge_Chickens',
                        [(*bankLoc*)],
                        [(*gatherLoc*)],
                        [[(*objectLoc*)], [(*objectLoc*)]],
                        [[(*toBank*)],[(*toBank*)]],
                        [[(*toGather*)],[(*toGather*)]],
                        [[(*toObject*)],[(*toObject*)]],
                        'Lumbridge');
  LumbridgeCows.init('Lumbridge_Cows',
                    [(*bankLoc*)],
                    [(*gatherLoc*)],
                    [[(*objectLoc*)], [(*objectLoc*)]],
                    [[(*toBank*)],[(*toBank*)]],
                    [[(*toGather*)],[(*toGather*)]],
                    [[(*toObject*)],[(*toObject*)]],
                    'Lumbridge');
  LumbridgeGoblins.init('Lumbridge_Goblins',
                       [(*bankLoc*)],
                       [(*gatherLoc*)],
                       [[(*objectLoc*)], [(*objectLoc*)]],
                       [[(*toBank*)],[(*toBank*)]],
                       [[(*toGather*)],[(*toGather*)]],
                       [[(*toObject*)],[(*toObject*)]],
                       'Lumbridge');
  EdgevilleDungeonHillGiants.init('Edgeville_Dungeon_Hill_Giants',
                                 [(*bankLoc*)],
                                 [(*gatherLoc*)],
                                 [[(*objectLoc*)], [(*objectLoc*)]],
                                 [[(*toBank*)],[(*toBank*)]],
                                 [[(*toGather*)],[(*toGather*)]],
                                 [[(*toObject*)],[(*toObject*)]],
                                 'Lumbridge');
  ChaosTunnelsMossGiants.init('Chaos_Tunnels_Moss_Giants',
                             [(*bankLoc*)],
                             [(*gatherLoc*)],
                             [[(*objectLoc*)], [(*objectLoc*)]],
                             [[(*toBank*)],[(*toBank*)]],
                             [[(*toGather*)],[(*toGather*)]],
                             [[(*toObject*)],[(*toObject*)]],
                             'Lumbridge');
  ChaosTunnelsFireGiants.init('Chaos_Tunnels_Fire_Giants',
                             [(*bankLoc*)],
                             [(*gatherLoc*)],
                             [[(*objectLoc*)], [(*objectLoc*)]],
                             [[(*toBank*)],[(*toBank*)]],
                             [[(*toGather*)],[(*toGather*)]],
                             [[(*toObject*)],[(*toObject*)]],
                             'Lumbridge');
  KaramjaFisher.init('Karamja_Fisher',
         [[626, 301], [625, 325], [648, 325], [648, 302]],
         [[920, 155], [949, 155], [949, 190], [918, 188]],
         [[], [(*objectLoc*)]],
         [[[933, 174], [932, 193], [921, 201], [901, 206], [881, 209], [862, 210],
           [844, 218], [826, 228], [809, 237], [788, 247], [768, 258],
           [752, 269], [731, 277], [708, 284], [690, 290], [673, 295], [654, 300], [642, 309]],
          [[934, 193], [931, 199], [919, 204], [907, 207], [895, 208], [882, 208],
           [865, 210], [848, 218], [839, 230], [832, 243], [826, 256],
           [818, 269], [805, 275], [791, 277], [780, 281], [761, 277], [743, 286],
           [729, 293], [713, 300], [694, 304], [673, 311], [659, 315], [648, 318]]],
         [[[642, 309], [654, 300], [673, 295], [690, 290], [708, 284], [731, 277],
           [752, 269], [768, 258], [788, 247], [809, 237], [826, 228],
           [844, 218], [862, 210], [881, 209], [901, 206], [921, 201], [932, 193], [933, 174]],
          [[648, 318], [659, 315], [673, 311], [694, 304], [713, 300], [729, 293],
           [743, 286], [761, 277], [780, 281], [791, 277], [805, 275],
           [818, 269], [826, 256], [832, 243], [839, 230], [848, 218], [865, 210],
           [882, 208], [895, 208], [907, 207], [919, 204], [931, 199], [934, 193]]],
         [[(*toObject*)],[(*toObject*)]],
         'Karamja');
  TaverlyDungeonBlueDragons.init('Taverly_Dungeon_Blue_Dragons',
                     [(*bankLoc*)],
                     [(*gatherLoc*)],
                     [[(*objectLoc*)], [(*objectLoc*)]],
                     [[(*toBank*)],[(*toBank*)]],
                     [[(*toGather*)],[(*toGather*)]],
                     [[(*toObject*)],[(*toObject*)]],
                     'Taverly');
  ForgottenCemetary.init('Forgotten_Cemetary',
                     [(*bankLoc*)],
                     [(*gatherLoc*)],
                     [[(*objectLoc*)], [(*objectLoc*)]],
                     [[(*toBank*)],[(*toBank*)]],
                     [[(*toGather*)],[(*toGather*)]],
                     [[(*toObject*)],[(*toObject*)]],
                     '');
  Canifis.init('Canifis',
              [(*bankLoc*)],
              [(*gatherLoc*)],
              [[(*objectLoc*)], [(*objectLoc*)]],
              [[(*toBank*)],[(*toBank*)]],
              [[(*toGather*)],[(*toGather*)]],
              [[(*toObject*)],[(*toObject*)]],
              'Canifis');
  FremennikSlayerdungeon.init('Fremennik_Slayer_Dungeon',
                              [(*bankLoc*)],
                              [(*gatherLoc*)],
                              [[(*objectLoc*)], [(*objectLoc*)]],
                              [[(*toBank*)],[(*toBank*)]],
                              [[(*toGather*)],[(*toGather*)]],
                              [[(*toObject*)],[(*toObject*)]],
                              'Relleka');
end;

procedure kTask.init(_name: String; _area: kTaskArea; _skill, _minLevel, _maxLevel: Integer;
                     _monster: kMonster; _tree: kTree; _ore: kOre; _wisp: kWisp; _fish: kFish; _loot: kLoot; _bank: kBank);
begin
  self.name := _name;
  self.area := _area;
  self.skill := _skill;
  self.minLevel := _minLevel;
  self.maxLevel := _maxLevel;
  self.monster := _monster;
  self.tree := _tree;
  self.ore := _ore;
  self.wisp := _wisp;
  self.fish := _fish;
  self.loot := _loot;
  self.bank := _bank;
end;

procedure initTasks()
begin
  //UTILITY
  fletchNstring.init('Fletch & String', GE, SKILL_FLETCHING, 1, 99, [], [], [], [], [], [], Gray);
  superHeat.init('Super Heat', GE, SKILL_MAGIC, 43, 99, [], [], [], [], [], [], []);
  highAlch.init('High Alch', GE, SKILL_MAGIC, 55, 99, [], [], [], [], [], [], []);
  //WOODCUTTING
  treeCutArrows.init('Tree Cut Arrows', GE, SKILL_WOODCUTTING, 1, 20, [], Tree, [], [], [], [], []);
  oakCutArrows.init('Oak Cut Arrows', VarrockCourtyard, SKILL_WOODCUTTING, 20, 40, [], Oak, [], [], [], [], []);
  willowCutArrows.init('Willow Cut Arrows', DraynorVillage, SKILL_WOODCUTTING, 40, 99, [], Willow, [], [], [], [], []);
  mapleCutArrows.init('Maple Cut Arrows', SeersVillage, SKILL_WOODCUTTING, 40, 99, [], Maple, [], [], [], [], []);
  mapleCutShortbows.init('Maple Cut Shortbows', SeersVillage, SKILL_WOODCUTTING, 40, 99, [], Maple, [], [], [], [], Gray);
  yewCutArrows.init('Yew Cut Arrows', LumbridgeForrest, SKILL_WOODCUTTING, 60, 99, [], Yew, [], [], [], [], []);
  //COMBAT
  fightChickens.init('Fight Chickens', LumbridgeChickens, SKILL_ATTACK, 1, 30, Chicken, [], [], [], [], [], []);
  fightCows.init('Fight Cows', LumbridgeCows, SKILL_ATTACK, 1, 30, Cow, [], [], [], [], [], []);
  fightGoblins.init('Fight Goblins', LumbridgeGoblins, SKILL_ATTACK, 1, 30, Goblin, [], [], [], [], [], []);
  fightHillGiants.init('Fight Hill Giants', EdgevilleDungeonHillGiants, SKILL_ATTACK, 40, 50, HillGiant, [], [], [], [], [], []);
  fightMossGiants.init('Fight Moss Giants', ChaosTunnelsMossGiants, SKILL_ATTACK, 50, 70, MossGiant, [], [], [], [], [], []);
  fightFireGiants.init('Fight Fire Giants', ChaosTunnelsFireGiants, SKILL_ATTACK, 70, 99, FireGiant, [], [], [], [], [], []);
  BlueDragonsTaverlyDungeon.init('Fight Blue Dragons', TaverlyDungeonBlueDragons, SKILL_RANGE, 35, 60, BabyBlueDragon, [], [], [], [], dragonBones, []);
  BlueDragonsForgottenCemetary.init('Fight Blue Dragons Wilderness', ForgottenCemetary, SKILL_ATTACK, 70, 99, BlueDragon, [], [], [], [], dragonBones, []);
  fightGhouls.init('Fight Ghouls', Canifis, SKILL_MAGIC, 35, 60, Ghoul, [], [], [], [], [], []);
  fightPyrefiends.init('Fight Pyrefiends', FremennikSlayerDungeon, SKILL_RANGE, 40, 60, Pyrefiend, [], [], [], [], [], []);
  //FISHING
  fishTuna.init('Fish Raw Tuna', KaramjaFisher, SKILL_FISHING, 35, 40, [], [], [], [], Tuna, [], []);
  fishLobster.init('Fish Raw Lobster', KaramjaFisher, SKILL_FISHING, 40, 99, [], [], [], [], Lobster, [], Stiles);
end;

function kTask.getLevel(): Integer;
begin
  result := tabStats.getSkillLevel(self.skill);
end;

function kTask.levelCheck(): boolean;   //returns true if the players skill levels fall within the range of the task
begin
  Result := false;
  if not (gameTabs.getActiveTab() = TAB_STATS) then
    gameTabs.openTab(TAB_STATS);
  if (self.getLevel() >= self.minLevel) and (self.getLevel() <= maxLevel) then
    exit(true)
  else
    writeLn('Our player does not meet the skill requirements for ', self.name);
end;

function kTask.isOnMap(): Boolean;     //returns true if the player is at the right location for the task
var
  pos: TPoint;
begin
  pos := sps.getPlayerPos();
  if (pos.x <> -1) and (pos.y <> -1) then result := true;
end;

function kTask.teleTo(): Boolean;        //returns true if we successfully teleported to the task area
begin
  case self.area.lodestone of
    'Lumbridge': lodestoneScreen.teleportTo(LOCATION_LUMBRIDGE);
    'Varrock': lodestoneScreen.teleportTo(LOCATION_VARROCK);
    'Edgeville': lodestoneScreen.teleportTo(LOCATION_EDGEVILLE);
    'Burthorpe': lodestoneScreen.teleportTo(LOCATION_BURTHORPE);
    'Taverly': lodestoneScreen.teleportTo(LOCATION_TAVERLEY);
    'Draynor': lodestoneScreen.teleportTo(LOCATION_DRAYNOR_VILLAGE);
    'Karamja': lodestoneScreen.teleportTo(LOCATION_KARAMJA);
    'Falador': lodestoneScreen.teleportTo(LOCATION_FALADOR);
    'Al Kharid': lodestoneScreen.teleportTo(LOCATION_AL_KHARID);
    'Port Sarim': lodestoneScreen.teleportTo(LOCATION_PORT_SARIM);
  end;
  wait(10000 + random(5000));
  Result := self.isOnMap();
end;

function kTask.goToObject(obj: integer): boolean;
begin
  Result := true;
  OSD.status.update('Walking to Object[' + toStr(obj) + '...');
  OSD.refresh();
  if not SPS.isInPolygon(self.area.objectLoc[obj]) then
  begin
    if not SPS.walkPath(self.area.toObject[obj], true) then
    begin
      OSD.status.update('Failed to walk to Object[' + toStr(obj) + ']!');
      OSD.refresh();
      exit(false);
    end;
    (*
    if not SPS.walkToPos(randomPoint(self.area.objectLoc[obj]), true) then
    begin
      OSD.status.update(['Failed to click random Point at Object[' + toStr(obj) + ']!']);
      OSD.refresh();
      exit(false);
    end;
    *)
  end;
end;

function kTask.goToGather(): boolean;
begin
  if SPS.isInPolygon(self.area.gatherLoc) then
    exit(true);
  OSD.status.update('Walking to Gather...');
  OSD.refresh();
  if SPS.walkPath(self.area.toGather[random(length(self.area.toGather))], true) then
    begin
      if SPS.walkToPos(randomPoint(self.area.gatherLoc)) then
        if SPS.isInPolygon(self.area.gatherLoc) then
          exit(true);
    end
    else
      begin
        OSD.status.update('Failed to walk to Gather Location!');
        OSD.refresh();
        exit(false);
      end;
end;

function kTask.goToBank(): boolean;
begin
  if SPS.isInPolygon(self.area.bankLoc) then
    exit(true);
  OSD.status.update('Walking to Bank...');
  OSD.refresh();
  if SPS.walkPath(self.area.toBank[random(length(self.area.toBank))], true) then
    begin
      if SPS.walkToPos(randomPoint(self.area.bankLoc)) then
        if SPS.isInPolygon(self.area.bankLoc) then
          exit(true);
    end
    else
      begin
        OSD.status.update('Failed to walk to Bank Location!');
        OSD.refresh();
        exit(false);
      end;
end;

procedure kTask.doBank(isPreset, tele: Boolean; preset: Integer = 0; rightClick: boolean = false)
var
  failTimer: TTimeMarker;

begin
  OSD.status.update('Banking...');
  OSD.refresh();
  if not SPS.isInPolygon(self.area.bankLoc) then
    begin
      if tele then
        self.teleTo();
      self.goToBank();
    end;

  wait(randomRange(600,1200));

  failTimer.reset();
  failTimer.start();

  repeat
    if bankScreen.isOpen() then break;
    if rightClick then
      if self.bank.find(MOUSE_RIGHT) then
        begin
          minimap.waitPlayerMoving();
          wait(600 + random(600) + random(600));
          if not tabBackpack.isFull() then
            exit;
        end;
    if self.bank.find() then
      minimap.waitPlayerMoving();
    repeat
      wait(randomRange(600,700));
    until bankScreen.isOpen() or (failTimer.getTime() > 1800);
  until bankScreen.isOpen() or (failTimer.getTime() > 60000);

  if failTimer.getTime() > 60000 then begin
    writeLn('Couldnt find the bank!');
    writeLn('Terminating Script!');
    terminateScript();
  end;

  failTimer.reset();

  if isPreset then
    begin
      if preset = 0 then
        preset := (1 + random(2));
      bankPreset(preset);
      writeLn('Withdrawing Bank Preset: ', toStr(preset));
    end
    else
    begin
      wait(randomRange(250,500));
      bankScreen.quickDeposit(QUICK_DEPOSIT_INVENTORY);
      smallRandomMouse();
      wait(randomRange(500,750));
      if bankScreen.isOpen() then
        bankScreen.close();
    end;
  wait(randomRange(600,800));
  if options.isOpen() then
    pressKey(27);
end;

function kTask.isReady(): Boolean;              //returns true/false if char is ready to do a task
begin
  if not self.levelCheck() then
  begin
    writeLn('We do not meet the level requirements for ', self.name, 'task.');
    exit(false);
  end;
  if not self.isOnMap() then
  begin
    writeLn('We are not in the correct area for ', self.name, 'task.');
    exit(false);
  end;
  result := true;
end;

procedure kTask.doCombatTask(loot: boolean = false);                 //NO NAVIGATION SUPPORTED AT THIS TIME
var
  kills, x, y: integer;
  lootTimer: TTimeMarker;
begin
  OSD.status.update('Starting Combat Task: ' + self.name);
  OSD.refresh();

  if not self.isOnMap() then
  begin
    writeLn('Player is not in the correct location to fight!');
    writeLn('Please navigate your character to the correct area and restart the script.');
    writeLn('Shutting Down...');
    terminateScript();
  end;

  if self.monster.name <> '' then
    kCombatMgr.init(self.monster)
  else
  begin
    writeLn('Attempted to do a combat task without a monster!');
    writeLn('Please report this issue to the script dev!');
    writeLn('Terminating....');
    terminateScript();
  end;

  kills := kCombatMgr.combat();

  if kills > 0 then
    kTracker.update(kills * round(self.monster.cmbtXP + self.monster.constXP), 0, kills)
  else
  begin
    writeLn('Didnt kill anything during combat task!');
    writeLn('Terminating...');
    terminateScript();
  end;

  if loot then
    begin
      OSD.status.update('Looting: ' + toStr(self.loot.settings.name));
      OSD.refresh();
      kCombatMgr.QuickPrayers(false);
      while length(self.loot.debug()) > 0 do
      begin
        if self.loot.find() then
          begin
            lootTimer.reset();
            lootTimer.start();
            repeat
              if lootScreen.isOpen() then
                break;
              minimap.waitPlayerMoving();
            until lootScreen.isOpen() or (lootTimer.getTime() > 8500);
            if (lootTimer.getTime() > 8500) and not lootScreen.isOpen() then
              begin
                writeLn('Taking too long for lootScreen to open!');
                break;
              end;
          end;

        while lootScreen.isOpen() do
        begin
          if dragonBones.hasInv() and (kCombatMgr.bury_Key > 0) and tabBackpack.isFull() then
            for 0 to dragonBones.count() do
              fastButton(toStr(kCombatMgr.bury_Key));
          kCombatMgr.equipSOP(sopII);
          lootScreen.clickButton(LOOT_BUTTON_CUSTOM);
          if not findDTM(self.loot.invDTM, x, y, lootScreen.getBounds()) then
          begin
            if random(16) = 0 then
              lootScreen.close();
            break;
          end;
        end;
      end;
    end;
end;

procedure kTask.doGatheringTask();
begin
  OSD.status.update('Starting Gathering Task: ' + self.name);
  OSD.refresh();

  if not SPS.isInPolygon(self.area.gatherLoc) then
    if not self.goToGather() then
      exit;

  case self.skill of
    SKILL_WOODCUTTING:
    begin
      kTracker.update((self.tree.cut() * self.tree.settings.XP), 1, 0);
      exit;
    end;
    SKILL_FISHING:
    begin
      kTracker.update((self.fish.fish() * self.fish.settings.XP), 1, 0);
      exit;
    end;
  end;

  begin
    writeLn('Attempted to do a Gather Task without useable objects!');
    writeLn('Please report this issue to the script dev!');
    writeLn('Terminating....');
    terminateScript();
  end;


end;

function kTask.highAlch(slot: string): boolean;
(*
var
  x, y: integer;
  *)
begin
  if not isLoggedIn() then
    exit;

  if tabBackpack.isEmpty() then
    exit(false);

  while tabBackpack.isItemInSlot(1,250) and tabBackpack.isItemInSlot(2,250) do
    begin
      //actionBar.clickSlot(13, MOUSE_LEFT);
      actionBarChar(slot);
      wait(random(600));
      mouseBox(tabBackpack.getSlotBox(2), MOUSE_LEFT);
      wait(600 + random(600) + random(250));
      if random(28) = 0 then
        makeItemsAntiBan(SKILL_MAGIC);
      (*
      if isMouseOverText(['ast high level']) then
        if random(100) < 86 then
        begin
          getMousePos(x, y);
          result := multiClick([x, y], 15, 3); // If left click, 15% chance to multi-click
          smallRandomMouse();
          exit(true);
        end else
        begin
          fastClick(MOUSE_RIGHT);
          if chooseOption.select(['ast high level']) then
          begin
            smallRandomMouse();
            exit(true);
          end;
        end;
      *)
    end;
end;

procedure kTask.featherHeadlessArrows(button: integer);
var
  failTimer: TTimeMarker;
begin
  if not isLoggedIn() then
    exit();

  while tabBackpack.count() > 2 do
  begin
    failTimer.reset();
    failTimer.start();

    repeat
      if productionScreen.isOpen() or toolScreen.isOpen() then break;
      if failTimer.getTime() > 15000 then begin
        writeLn('Something went wrong...');
        writeLn('Production/Tool Screen isnt open!');
        writeLn('Logging out...');
        players[currentPlayer].exitToLobby();
        terminateScript();
      end;
      if random(100) > 67 then
        actionBar.clickSlot(button, MOUSE_LEFT)
      else
        actionBarChar('0');
      wait(randomRange(600,900));
    until productionScreen.isOpen() or toolScreen.isOpen();

    failTimer.reset();

    if toolScreen.isOpen() then toolScreen.select('Knife');

    makeItems();
    waitForItems(SKILL_FLETCHING);
  end;
end;

procedure kTask.cutAndFletch(fletchKey: integer; fletchType: integer = 1);
var
  s: string;
  xp: integer;
begin
  if tabBackpack.isFull() then
  begin
    case fletchType of
      1: s := 'Arrow Shafts';
      2: s := 'Shortbow (u)s';
      3: s := 'Stocks';
      4: s := 'Shieldbow (u)s';
    end;
    OSD.status.update('Cutting: ' + toStr(self.tree.settings.name) + s);
    OSD.refresh();
    fletch(fletchKey, fletchType);
    case self.tree.settings.name of
      'Tree':
        begin
          case fletchType of
            0: xp := (5 * 28);
            1: xp := (5 * 28);
            3: xp := (10 * 28);
          end;
        end;
      'Oak Tree':
        begin
          case fletchType of
            0: xp := round(7.5 * 28);
            1: xp := round(16.5 * 28);
            3: xp := (25 * 28);
          end;
        end;
      'Willow Tree':
        begin
          case fletchType of
            0: xp := (10 * 28);
            1: xp := round(33.3 * 28);
            3: xp := round(41.5 * 28);
          end;
        end;
      'Maple Tree':
        begin
          case fletchType of
            0: xp := round(12.5 * 28);
            1: xp := (50 * 28);
            3: xp := round(58.3 * 28);
          end;
        end;
      'Yew Tree':
        begin
          case fletchType of
            0: xp := (15 * 28);
            1: xp := round(67.5 * 28);
            3: xp := (75 * 28);
          end;
        end;
    end;
    kTracker.update(xp, 1, 0);
    self.doBank(false, false);
  end else
    self.doGatheringTask();
end;

procedure kTask.iKaramjaPowerFisher(dropKey: string);
begin
  if tabBackpack.isFull() then
  repeat
    if conversationBox.isOpen(600) then
      conversationBox.continue(true, false);
    for 0 to lobstah.count() do
      fastButton(dropKey);
  until (lobstah.count() = 0)
  else
    self.doGatheringTask();
end;

procedure kTask.iKarmjaFisher();    //+rep KB :D
begin
  if tabBackpack.isFull() then
    self.doBank(false, false, 0, true)
  else
    self.doGatheringTask();
end;

procedure kTask.doTask();
begin
  if not isLoggedIn() then exit;
  OSD.status.update('Doing Task: ' + self.name);
  OSD.refresh();
  case self.name of
    'Willow Cut Arrows': self.cutAndFletch(11);
    'Maple Cut Arrows': self.cutAndFletch(11);
    'Maple Cut Shortbows': self.cutAndFletch(11, 2);
    'Fish Raw Tuna': self.iKaramjaPowerFisher('x');
    'Fish Raw Lobster': self.iKarmjaFisher();
    'Fight Fire Giants': self.doCombatTask();
    'Fight Blue Dragons': self.doCombatTask();
    'Fight Blue Dragons Wilderness': self.doCombatTask(true);
    'Fight Ghouls': self.doCombatTask();
    'Fight Pyrefiends': self.doCombatTask();
  end;
end;

function setupTasks(): array of kTask;
var
  tasks: array of kTask;
begin
  //if kTask.levelCheck() then
    //tasks := (tasks + kTask);

  if fletchNString.levelCheck() then
    tasks := tasks + fletchNString;

  if superHeat.levelCheck() then
    tasks := tasks + superHeat;

  if highAlch.levelCheck() then
    tasks := tasks + highAlch;

  if treeCutArrows.levelCheck() then
    tasks := tasks + treeCutArrows;

  if oakCutArrows.levelCheck() then
    tasks := tasks + oakCutArrows;

  if willowCutArrows.levelCheck() then
    tasks := tasks + willowCutArrows;

  if yewCutArrows.levelCheck() then
    tasks := tasks + yewCutArrows;

  if fightChickens.levelCheck() then
    tasks := tasks + fightChickens;

  if fightCows.levelCheck() then
    tasks := tasks + fightCows;

  if fightGoblins.levelCheck() then
    tasks := tasks + fightGoblins;

  if fightHillGiants.levelCheck() then
    tasks := tasks + fightHillGiants;

  if fightMossGiants.levelCheck() then
    tasks := tasks + fightMossGiants;

  if fightFireGiants.levelCheck() then
    tasks := tasks + fightFireGiants;


  if length(tasks) < 0 then
  begin
    writeLn('We cant do any tasks!');
    writeLn('Shutting down!');
    terminateScript();
  end;

  result := tasks;
end;
