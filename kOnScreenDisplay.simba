(*
kOnScreenDisplay
================

The kOnScreenDisplay file holds all the functions and procedures
required for Klamor's NXT-oriented scripts.

*)

{$include_once NAS/NAS.simba}
{$include_once SRL-6-SIMBA1.2/SRL.simba}
{$f-}

(*
**type statusOverlay**

contains the vars for script status overlays

*)
type
  statusOverlay = record
    col: integer;
    box: TBox;
    txt: String;
    state: TStringArray;
  end;

(*
**type progressOverlay**

contains the vars for script status overlays

*)
type
  progressOverlay = record
    bmp: Integer;
    loc: Tpoint;
    stats: TStringArray;
  end;

(*
**type onScreenDisplay**

contains the vars for script status overlays

*)
type
  onScreenDisplay = record
    progress: progressOverlay;
    status: statusOverlay;
  end;

(*
**var OSD**

A variable through which scripters can access the onScreenDisplay methods.

*)
var
  OSD: onScreenDisplay;

(*
statusOverlay methods
~~~~~~~~~~~~~~~~~~~~~

The following methods should be called through the OSD.status variable.

*)
{*
init
----

Initializes a statusOverlay.

.. note::

    - by Klamor
    - Last Updated: 29 December 2017

Example:

    procedure statusOverlay.__init();

*}

procedure statusOverlay.__init();
begin
  self.box := [chatbox.x1, (chatbox.y1 - 28), chatbox.x2, chatbox.y1];    //status box ontop of chatbox tabs
  case random(6) of
                0: self.col := clRed;
                1: self.col := clGreen;
                2: self.col := clBlue;
                3: self.col := clOrange;
                4: self.col := clNavy;
                5: self.col := clMaroon;
              end;
  self.txt := 'Status: ';
  self.state := ['Initializing...'];
end;

(*
statusOverlay.update()
======================

    procedure statusOverlay.update(txt: TStringArray);

    Example:
      OSD.status.update(['derping', 'around']);
*)
procedure statusOverlay.update(txt: TStringArray);
begin
  self.state := txt;
end;

(*
progressOverlay methods
~~~~~~~~~~~~~~~~~~~~~~~

The following methods should be called through the OSD.progress variable.

*)
{*
init
----

Initializes a progressOverlay.

.. note::

    - by Klamor
    - Last Updated: 29 December 2017

Example:

    procedure progressOverlay.__init();

*}
procedure progressOverlay.__init();
begin
  self.bmp := loadBitmap(appPath + 'Includes/Klamor/Progress.png');
    fastReplaceColor(self.bmp, 0, 1);
  self.loc := point(chatbox.x1, chatbox.y1);
  setLength(self.stats, 4);
  self.stats[0] := toStr(0);
  self.stats[1] := toStr(0);
  self.stats[2] := toStr(0);
  self.stats[3] := 'N/A - Not Implemented';	
end;

(*
progressOverlay.update()
======================

    procedure progressOverlay.update(txt: TStringArray);

    Example:
      OSD.progress.update([toStr(minsWorked) + ' mins', toStr(totalEXP), toStr(EXP/hr)]);

*)
procedure progressOverlay.update(txt: TStringArray);
begin
  self.stats := txt;
end;

(*
initNXTui();
============

Initializes the SRL-6/Simba1.2 UI elements for use with 1920x1080
NXT scripting.

*)
procedure initNXTui();
begin
  MainScreen.__setup();
  Lobby.__init();
  GameTabs.__init();
  TabBackpack.__init();
  ChatBox.__setup();
  Minimap.__init();
  ActionBar.__init();
end;

(*
drawUi();
=========

Requires NAS include.
Draws the main UI elements for ease of configuring the in-game UI
to function properly with SRL-6/Simba1.2

*)
procedure drawUI();
begin
{$IFDEF NAS_DRAWING}
  NAS.Drawing.drawBox(mainScreen.getBounds(), false, clWhite);
  NAS.Drawing.drawBox(miniMap.getBounds(), false, clWhite);
  NAS.Drawing.drawBox(actionBar.getBounds(), false, clWhite);
  NAS.Drawing.drawBoxes(actionBar.__slots, false, clWhite);
  NAS.Drawing.drawBox(tabBackpack.getBounds(), false, clWhite);
  NAS.Drawing.drawBox(ChatBox.getBounds(), false, clWhite);
  NAS.Drawing.drawBox(GameTabs.__tabSelectionArea, false, clWhite);
  NAS.Drawing.drawBox(GameTabs.tabArea, false, clWhite);
  NAS.Drawing.drawBox(GameTabs.getActiveTabArea(), false, clWhite);
{$ENDIF}
end;

(*
drawString();
==============

    procedure drawString(s: String; p: TPoint);

Draws a String at a Tpoint

*)
procedure drawString(s: String; p: TPoint);
begin
  {$IFDEF NAS_DRAWING}
    NAS.Drawing.drawText(s, p, 'SmallChars07', false, clWhite);
  {$ENDIF}
end;

(*
onScreenDisplay.drawProgress();
===============

Draws a progress report

*)
procedure onScreenDisplay.drawProgress();
var
  run, exp, xph, break: TPoint;
begin
  {$IFDEF NAS_DRAWING}
  NAS.Drawing.drawBitmap(self.progress.bmp, self.progress.loc);
  {$ENDIF}
  run := point((chatbox.x1 + 105),(chatbox.y1 + 68));
  exp := point((chatbox.x1 + 65),(chatbox.y1 + 95));
  xph := point((chatbox.x1 + 100),(chatbox.y1 + 125));
  break := point((chatbox.x1 + 125),(chatbox.y1 + 155));
  self.progress.stats[0] := toStr(msToTime(players[currentPlayer].worked.getTime(), TIME_ABBREV));
  drawString(self.progress.stats[0], run);
  drawString(self.progress.stats[1], exp);
  drawString(self.progress.stats[2], xph);
  drawString(self.progress.stats[3], break);
end;

(*
onScreenDisplay.drawStatus();
===============

Draws a statusOverlay

*)
procedure onScreenDisplay.drawStatus();
var
  txtPoint, statusPoint: TPoint;
  x: Integer;
begin
  {$IFDEF NAS_DRAWING}
  NAS.Drawing.drawBox(self.status.box, true, self.status.col);
  txtPoint := point(self.status.box.X1 + 10, self.status.box.Y1 + 8);
  drawString(self.status.txt, txtPoint);
  statusPoint := point(self.status.box.X1 + 70, self.status.box.Y1 + 8);
  for x := 0 to high(self.status.state) do
    drawString(self.status.state[x], point((statusPoint.x + (x*75)), statusPoint.y));
  {$ENDIF}
end;

(*
onScreenDisplay.refresh();
===============

Refreshes the onScreenDisplay.

*)
procedure onScreenDisplay.refresh();
begin
  {$IFDEF NAS_DRAWING}
  NAS.Drawing.Clear();
  self.drawProgress();
  self.drawStatus();
  {$ENDIF}
end;

begin
  initNXTui();
  OSD.progress.__init();
  OSD.status.__init();
end;
