{$Include_once SRL-6-SIMBA1.2/SRL.simba}
{$Include_once SPS/lib/SPS-rs3.simba}
{$include_once NAS/NAS.simba}
{$include_once Klamor/kOnScreenDisplay.simba}
{$Include_once Klamor/kGameObject.simba}
{$include_once Klamor/kCombat.simba}
{$include_once Klamor/kMisc.simba}
{$include_once Klamor/kExpTracker.simba}
{$f-}

type
  kTaskArea = record
    mapName     : String;            //SPS map name
    bankLoc     : TPointArray;       //Bank Location Polygon
    gatherLoc   : TPointArray;       //Gather Location Polygon
    objectLoc   : T2DPointArray;     //array of Object Location Polygon(s)
    toBank      : TPointArray;       //path to self.bankLoc
    toGather    : TPointArray;       //path to self.gatherLoc
    toObject    : T2DPointArray;     //array of paths to self.object[s]
    lodestone   : String;            //string of TaskArea lodestone (eg. 'Lumbridge')
  end;

  kTask = record             //stores information for tasks
    name        : string;
    area        : kTaskArea;
    skill       : Integer;
    minLevel    : Integer;
    maxLevel    : Integer;
    //loot      : array of kloot;
    monster     : kMonster;
    tree        : kTree;
    ore         : kOre;
    wisp        : kWisp;
    fish        : kFish;
    bank        : kBank;
  end;

//
//    Defined Task Areas
//
var
  GE, VarrockCourtyard, DraynorVillage, LumbridgeForrest, LumbridgeChickens, LumbridgeCows, LumbridgeGoblins,
  EdgevilleDungeonHillGiants, ChaosTunnelsMossGiants, ChaosTunnelsFireGiants, KaramjaFisher, SeersVillage: kTaskArea;

//
//    Defined Tasks
//
var
  //general
  fletchNstring, superHeat, highAlch,
  //end general

  //woodcutting
  treeCutArrows, oakCutArrows, willowCutArrows, mapleCutArrows, yewCutArrows,
  //end woodcutting

  //combat
  fightChickens, fightCows, fightGoblins, fightHillGiants, fightMossGiants, fightFireGiants,
  //end combat

  //fishing
  fishTuna, fishLobster, iKaramjaFisher: kTask;
  //endfishing

procedure kTaskArea.init(_mapName: String; _bankLoc, _gatherLoc: TPointArray; _objectLoc: T2DPointArray;
                         _toBank, _toGather: TPointArray; _toObject: T2DPointArray; _lodestone: String);
begin
  self.mapName := _mapName;
  self.bankLoc := _bankLoc;
  self.gatherLoc := _gatherLoc;
  self.objectLoc := _objectLoc;
  self.toBank := _toBank;
  self.toGather := _toGather;
  self.toObject := _toObject;
  self.lodestone := _lodestone;
end;

procedure setupTaskAreas();
begin
  GE.init('Grand_Exchange',
         [(*bankLoc*)],
         [(*gatherLoc*)],
         [[(*objectLoc*)], [(*objectLoc*)]],
         [(*toBank*)],
         [(*toGather*)],
         [[(*toObject*)],[(*toObject*)]],
         'Varrock');
  VarrockCourtyard.init('Varrock_Courtyard',
                       [(*bankLoc*)],
                       [(*gatherLoc*)],
                       [[(*objectLoc*)], [(*objectLoc*)]],
                       [(*toBank*)],
                       [(*toGather*)],
                       [[(*toObject*)],[(*toObject*)]],
                       'Varrock');
  DraynorVillage.init('Draynor_Village',
                     [(*bankLoc*)[247, 147], [226, 150], [226, 171], [245, 174]],
                     [(*gatherLoc*)[177, 169], [239, 183], [229, 246], [181, 222]],
                     [[(*objectLoc*)], [(*objectLoc*)]],
                     [(*toBank*)],
                     [(*toGather*)],
                     [[(*toObject*)],[(*toObject*)]],
                     'Draynor');
  SeersVillage.init('Seers_Village',
                     [(*bankLoc*)],
                     [(*gatherLoc*)],
                     [[(*objectLoc*)], [(*objectLoc*)]],
                     [(*toBank*)],
                     [(*toGather*)],
                     [[(*toObject*)],[(*toObject*)]],
                     'Seers');
  LumbridgeForrest.init('Lumbridge_Forrest', [(*bankLoc*)], [(*gatherLoc*)], [[(*objectLoc*)], [(*objectLoc*)]],
                       [(*toBank*)], [(*toGather*)], [[(*toObject*)],[(*toObject*)]], 'Lumbridge');
  LumbridgeChickens.init('Lumbridge_Chickens', [(*bankLoc*)], [(*gatherLoc*)], [[(*objectLoc*)], [(*objectLoc*)]],
                        [(*toBank*)], [(*toGather*)], [[(*toObject*)],[(*toObject*)]], 'Lumbridge');
  LumbridgeCows.init('Lumbridge_Cows', [(*bankLoc*)], [(*gatherLoc*)], [[(*objectLoc*)], [(*objectLoc*)]],
                    [(*toBank*)], [(*toGather*)], [[(*toObject*)],[(*toObject*)]], 'Lumbridge');
  LumbridgeGoblins.init('Lumbridge_Goblins', [(*bankLoc*)], [(*gatherLoc*)], [[(*objectLoc*)], [(*objectLoc*)]],
                       [(*toBank*)], [(*toGather*)], [[(*toObject*)],[(*toObject*)]], 'Lumbridge');
  EdgevilleDungeonHillGiants.init('Edgeville_Dungeon_Hill_Giants', [(*bankLoc*)], [(*gatherLoc*)], [[(*objectLoc*)], [(*objectLoc*)]],
                                 [(*toBank*)], [(*toGather*)], [[(*toObject*)],[(*toObject*)]], 'Lumbridge');
  ChaosTunnelsMossGiants.init('Chaos_Tunnels_Moss_Giants', [(*bankLoc*)], [(*gatherLoc*)], [[(*objectLoc*)], [(*objectLoc*)]],
                             [(*toBank*)], [(*toGather*)], [[(*toObject*)],[(*toObject*)]], 'Lumbridge');
  ChaosTunnelsFireGiants.init('Chaos_Tunnels_Fire_Giants', [(*bankLoc*)], [(*gatherLoc*)], [[(*objectLoc*)], [(*objectLoc*)]],
                             [(*toBank*)], [(*toGather*)], [[(*toObject*)],[(*toObject*)]], 'Lumbridge');
  KaramjaFisher.init('Karamja_Fisher',
         [[128, 287], [150, 287], [149, 310], [126, 309]],
         [[423, 151], [421, 169], [444, 169], [445, 150]],
         [[[282, 214], [282, 256], [302, 259], [301, 215]], [(*objectLoc*)]],
         [[433, 177], [422, 180], [409, 183], [394, 189], [379, 193], [367, 198],
           [352, 207], [340, 223], [331, 226], [322, 237], [313, 252],
           [293, 258], [280, 259], [256, 264], [235, 268], [215, 273], [197, 276],
           [181, 283], [161, 289], [146, 294]],
         [[148, 300], [157, 297], [170, 289], [184, 282], [199, 280], [215, 280],
           [230, 279], [245, 273], [262, 262], [278, 261], [307, 256],
           [323, 240], [338, 234], [349, 220], [365, 198], [392, 195], [413, 189],
           [427, 183], [436, 175], [436, 166]],
         [[(*toObject*)],[(*toObject*)]],
         'Karamja');

end;

procedure kTask.init(_name: String; _area: kTaskArea; _skill, _minLevel, _maxLevel: Integer;
                     _monster: kMonster; _tree: kTree; _ore: kOre; _wisp: kWisp; _fish: kFish; _bank: kBank);
begin
  self.name := _name;
  self.area := _area;
  self.skill := _skill;
  self.minLevel := _minLevel;
  self.maxLevel := _maxLevel;
  self.monster := _monster;
  self.tree := _tree;
  self.ore := _ore;
  self.wisp := _wisp;
  self.fish := _fish;
  self.bank := _bank;
end;

procedure initTasks()
begin
  fletchNstring.init('Fletch & String', GE, SKILL_FLETCHING, 1, 99, [], [], [], [], [], Gray);
  superHeat.init('Super Heat', GE, SKILL_MAGIC, 43, 99, [], [], [], [], [], []);
  highAlch.init('High Alch', GE, SKILL_MAGIC, 55, 99, [], [], [], [], [], []);
  treeCutArrows.init('Tree Cut Arrows', GE, SKILL_WOODCUTTING, 1, 20, [], Tree, [], [], [], []);
  oakCutArrows.init('Oak Cut Arrows', VarrockCourtyard, SKILL_WOODCUTTING, 20, 40, [], Oak, [], [], [], []);
  willowCutArrows.init('Willow Cut Arrows', DraynorVillage, SKILL_WOODCUTTING, 40, 99, [], Willow, [], [], [], []);
  mapleCutArrows.init('Maple Cut Arrows', SeersVillage, SKILL_WOODCUTTING, 40, 99, [], Maple, [], [], [], []);
  yewCutArrows.init('Yew Cut Arrows', LumbridgeForrest, SKILL_WOODCUTTING, 60, 99, [], Yew, [], [], [], []);
  fightChickens.init('Fight Chickens', LumbridgeChickens, SKILL_ATTACK, 1, 30, Chicken, [], [], [], [], []);
  fightCows.init('Fight Cows', LumbridgeCows, SKILL_ATTACK, 1, 30, Cow, [], [], [], [], []);
  fightGoblins.init('Fight Goblins', LumbridgeGoblins, SKILL_ATTACK, 1, 30, Goblin, [], [], [], [], []);
  fightHillGiants.init('Fight Hill Giants', EdgevilleDungeonHillGiants, SKILL_ATTACK, 40, 50, HillGiant, [], [], [], [], []);
  fightMossGiants.init('Fight Moss Giants', ChaosTunnelsMossGiants, SKILL_ATTACK, 50, 70, MossGiant, [], [], [], [], []);
  fightFireGiants.init('Fight Fire Giants', ChaosTunnelsFireGiants, SKILL_ATTACK, 70, 99, FireGiant, [], [], [], [], []);
  fishTuna.init('Fish Raw Tuna', KaramjaFisher, SKILL_FISHING, 35, 40, [], [], [], [], Tuna, []);
  fishLobster.init('Fish Raw Lobster', KaramjaFisher, SKILL_FISHING, 40, 99, [], [], [], [], Lobster, Stiles);
end;

function kTask.getLevel(): Integer;
begin
  result := tabStats.getSkillLevel(self.skill);
end;

function kTask.levelCheck(): boolean;   //returns true if the players skill levels fall within the range of the task
begin
  Result := false;
  if not (gameTabs.getActiveTab() = TAB_STATS) then
    gameTabs.openTab(TAB_STATS);
  if (self.getLevel() >= self.minLevel) and (self.getLevel() <= maxLevel) then
    exit(true)
  else
    writeLn('Our player does not meet the skill requirements for ', self.name);
end;

function kTask.isOnMap(): Boolean;     //returns true if the player is at the right location for the task
var
  pos: TPoint;
begin
  pos := sps.getPlayerPos();
  if (pos.x <> -1) and (pos.y <> -1) then result := true;
end;

function kTask.teleTo(): Boolean;        //returns true if we successfully teleported to the task area
begin
  case self.area.lodestone of
    'Lumbridge': lodestoneScreen.teleportTo(LOCATION_LUMBRIDGE);
    'Varrock': lodestoneScreen.teleportTo(LOCATION_VARROCK);
    'Edgeville': lodestoneScreen.teleportTo(LOCATION_EDGEVILLE);
    'Burthorpe': lodestoneScreen.teleportTo(LOCATION_BURTHORPE);
    'Taverly': lodestoneScreen.teleportTo(LOCATION_TAVERLEY);
    'Draynor': lodestoneScreen.teleportTo(LOCATION_DRAYNOR_VILLAGE);
    'Karamja': lodestoneScreen.teleportTo(LOCATION_KARAMJA);
    'Falador': lodestoneScreen.teleportTo(LOCATION_FALADOR);
    'Al Kharid': lodestoneScreen.teleportTo(LOCATION_AL_KHARID);
    'Port Sarim': lodestoneScreen.teleportTo(LOCATION_PORT_SARIM);
  end;
  wait(10000 + random(5000));
  Result := self.isOnMap();
end;

function kTask.goToObject(obj: integer): boolean;
begin
  Result := true;
  OSD.status.update(['Walking to Object[' + toStr(obj) + '...']);
  OSD.refresh();
  if not SPS.isInPolygon(self.area.objectLoc[obj]) then
  begin
    if not SPS.walkPath(self.area.toObject[obj], true) then
    begin
      OSD.status.update(['Failed to walk to Object[' + toStr(obj) + ']!']);
      OSD.refresh();
      exit(false);
    end;
    (*
    if not SPS.walkToPos(randomPoint(self.area.objectLoc[obj]), true) then
    begin
      OSD.status.update(['Failed to click random Point at Object[' + toStr(obj) + ']!']);
      OSD.refresh();
      exit(false);
    end;
    *)
  end;
end;

function kTask.goToGather(): boolean;
begin
  Result := true;
  OSD.status.update(['Walking to Gather...']);
  OSD.refresh();
  if not SPS.isInPolygon(self.area.gatherLoc) then
  begin
      if not SPS.walkPath(self.area.toGather, true) then
      begin
        OSD.status.update(['Failed to walk to Gather!']);
        OSD.refresh();
        exit(false);
      end;
      (*
      if not SPS.walkToPos(randomPoint(self.area.gatherLoc), true) then
      begin
        OSD.status.update(['Failed to click Random Point at Gather Loaction!']);
        OSD.refresh();
        exit(false);
      end;
      *)
  end;
end;

function kTask.goToBank(): boolean;
begin
  Result := true;
  OSD.status.update(['Walking to Bank...']);
  OSD.refresh();
  if not SPS.isInPolygon(self.area.bankLoc) then
  begin
    if not SPS.walkPath(self.area.toBank, true) then
    begin
      OSD.status.update(['Failed to walk to Bank!']);
      OSD.refresh();
      exit(false);
    end;
    (*
    if not SPS.walkToPos(randomPoint(self.area.bankLoc), true) then
    begin
      OSD.status.update(['Failed to click RandomPoint at Bank Location!']);
      OSD.refresh();
      exit(false);
    end;
    *)
  end;
end;

procedure kTask.bank(isPreset, tele: Boolean; preset: Integer)
var
  failTimer: TTimeMarker;

begin
  OSD.status.update(['Banking...']);
  OSD.refresh();
  if not SPS.isInPolygon(self.area.bankLoc) then
  begin
    case tele of
      false: self.goToBank();
      true: begin
        self.teleTo();
        self.goToBank();
      end;
    end;
  end;

  wait(randomRange(1200,1300));

  failTimer.reset();
  failTimer.start();

  repeat
    if bankScreen.isOpen() then break;
    if self.bank.find() then
      minimap.waitPlayerMoving();
    repeat
      wait(randomRange(600,700));
    until bankScreen.isOpen() or (failTimer.getTime() > 1800);
  until bankScreen.isOpen() or (failTimer.getTime() > 60000);

  if failTimer.getTime() > 60000 then begin
    writeLn('Couldnt find the bank!');
    writeLn('Terminating Script!');
    terminateScript();
  end;

  failTimer.reset();

  if preset = 0 then preset := (1 + random(2));

  case isPreset of
    false: begin
      wait(randomRange(250,500));
      bankScreen.quickDeposit(QUICK_DEPOSIT_INVENTORY);
      smallRandomMouse();
      wait(randomRange(500,750));
      if bankScreen.isOpen() then
        bankScreen.close();
    end;
    true: begin
      bankPreset(preset);
      writeLn('Withdrawing Bank Preset: ', toStr(preset));
    end;
  end;
  wait(randomRange(600,800));
  if options.isOpen() then
    pressKey(27);
end;

function kTask.isReady(): Boolean;              //returns true/false if char is ready to do a task
begin
  if not self.levelCheck() then
  begin
    writeLn('We do not meet the level requirements for ', self.name, 'task.');
    exit(false);
  end;
  if not self.isOnMap() then
  begin
    writeLn('We are not in the correct area for ', self.name, 'task.');
    exit(false);
  end;
  result := true;
end;

function kTask.doCombatTask(): boolean;                 //NO NAVIGATION SUPPORTED AT THIS TIME
begin
  OSD.status.update(['Starting Combat Task: ' + self.name]);
  OSD.refresh();

  if not self.isOnMap() then
  begin
    writeLn('Player is not in the correct location to fight!');
    writeLn('Please navigate your character to the correct area and restart the script.');
    writeLn('Shutting Down...');
    terminateScript();
  end;

  if self.monster.name <> '' then
    kCombatMgr.init(self.monster)
  else
  begin
    writeLn('Attempted to do a combat task without a monster!');
    writeLn('Please report this issue to the script dev!');
    writeLn('Terminating....');
    terminateScript();
  end;
  if kCombatMgr.healthCheck() then
    if kCombatMgr.fight() then              //only fight once
    begin
      kTracker.update(round(self.monster.cmbtXP) + round(self.monster.constXP), 0, 1);
      exit(true);
    end;
end;

procedure kTask.doGatheringTask();
begin
  OSD.status.update(['Starting Gathering Task: ' + self.name]);
  OSD.refresh();

  if not SPS.isInPolygon(self.area.gatherLoc) then
  begin
    self.goToGather();
  end;

  case self.skill of
    SKILL_WOODCUTTING:
    begin
      kTracker.update((self.tree.cut() * self.tree.settings.XP), 1, 0);
      exit;
    end;
    SKILL_FISHING:
    begin
      kTracker.update((self.fish.fish() * self.fish.settings.XP), 1, 0);
      exit;
    end;
  end;

  begin
    writeLn('Attempted to do a Gather Task without useable objects!');
    writeLn('Please report this issue to the script dev!');
    writeLn('Terminating....');
    terminateScript();
  end;


end;

procedure kTask.cutAndFletchArrows();
begin
  case tabBackpack.isFull() of
    false: self.doGatheringTask();
    true: begin
      OSD.status.update(['Cutting Arrow Shafts']);
      OSD.refresh();
      cutArrowShafts('x');
    end;
  end;
end;

procedure kTask.iKaramjaPowerFisher(dropKey: string);
begin
  if tabBackpack.isFull() then
  begin
      repeat
        if conversationBox.isOpen(600) then
          conversationBox.continue(true, false);
        fastButton('x');
      until lobstah.count() = 0;
  end else
    self.doGatheringTask();
end;

procedure kTask.iKarmjaFisher();    //+rep KB :D
begin
  if tabBackpack.isFull() then
  repeat
    self.goToBank();
    Stiles.find(MOUSE_RIGHT);
  until tabBackpack.count() < 2
  else
    self.doGatheringTask();
end;

procedure kTask.doTask();
begin
  if not isLoggedIn() then exit;
  OSD.status.update(['Doing Task: ' + self.name]);
  OSD.refresh();
  case self.name of
    'Willow Cut Arrows': self.cutAndFletchArrows();
    'Fish Raw Tuna': self.iKaramjaPowerFisher('x');
    'Fish Raw Lobster': self.iKaramjaPowerFisher('x');
    'Fight Fire Giants': self.doCombatTask();
  end;
end;

function setupTasks(): array of kTask;
var
  tasks: array of kTask;
begin
  //if kTask.levelCheck() then
    //tasks := (tasks + kTask);

  if fletchNString.levelCheck() then
    tasks := tasks + fletchNString;

  if superHeat.levelCheck() then
    tasks := tasks + superHeat;

  if highAlch.levelCheck() then
    tasks := tasks + highAlch;

  if treeCutArrows.levelCheck() then
    tasks := tasks + treeCutArrows;

  if oakCutArrows.levelCheck() then
    tasks := tasks + oakCutArrows;

  if willowCutArrows.levelCheck() then
    tasks := tasks + willowCutArrows;

  if yewCutArrows.levelCheck() then
    tasks := tasks + yewCutArrows;

  if fightChickens.levelCheck() then
    tasks := tasks + fightChickens;

  if fightCows.levelCheck() then
    tasks := tasks + fightCows;

  if fightGoblins.levelCheck() then
    tasks := tasks + fightGoblins;

  if fightHillGiants.levelCheck() then
    tasks := tasks + fightHillGiants;

  if fightMossGiants.levelCheck() then
    tasks := tasks + fightMossGiants;

  if fightFireGiants.levelCheck() then
    tasks := tasks + fightFireGiants;


  if length(tasks) < 0 then
  begin
    writeLn('We cant do any tasks!');
    writeLn('Shutting down!');
    terminateScript();
  end;

  result := tasks;
end;
