{$Include_once SRL-6-SIMBA1.2/SRL.simba}
{$Include_once SPS/lib/SPS-rs3.simba}
{$include_once NAS/NAS.simba}
{$include_once Klamor/kOnScreenDisplay.simba}
{$Include_once Klamor/kGameObject.simba}
{$include_once Klamor/kCombat.simba}
{$include_once Klamor/kMisc.simba}
{$f-}

type
  kTaskArea = record
    mapName     : String;            //SPS map name
    bankLoc     : TPointArray;       //Bank Location Polygon
    gatherLoc   : TPointArray;       //Gather Location Polygon
    objectLoc   : T2DPointArray;     //array of Object Location Polygon(s)
    toBank      : TPointArray;       //path to self.bankLoc
    toGather    : TPointArray;       //path to self.gatherLoc
    toObject    : T2DPointArray;     //array of paths to self.object[s]
    lodestone   : String;            //string of TaskArea lodestone (eg. 'Lumbridge')
  end;

  kTask = record             //stores information for tasks
    name        : string;
    area        : kTaskArea;
    skill       : Integer;
    minLevel    : Integer;
    maxLevel    : Integer;
    //loot      : array of kloot;
    monster     : kMonster;
    tree        : kTree;
    ore         : kOre;
    bank        : kBank;
  end;

//
//    Defined Task Areas
//
var
  GE: kTaskArea;

//
//    Defined Tasks
//
var
  fletchNstring, superHeat, highAlch: kTask;

procedure kTaskArea.init(_mapName: String; _bankLoc, _gatherLoc: TPointArray; _objectLoc: T2DPointArray;
                         _toBank, _toGather: TPointArray; _toObject: T2DPointArray; _lodestone: String);
begin
  self.mapName := _mapName;
  self.bankLoc := _bankLoc;
  self.gatherLoc := _gatherLoc;
  self.objectLoc := _objectLoc;
  self.toBank := _toBank;
  self.toGather := _toGather;
  self.toObject := _toObject;
  self.lodestone := _lodestone;
end;

procedure setupTaskAreas();
begin
  GE.init('Grand_Exchange', [(*bankLoc*)], [(*gatherLoc*)], [[(*objectLoc*)], [(*objectLoc*)]],
                     [(*toBank*)], [(*toGather*)], [[(*toObject*)],[(*toObject*)]], 'Varrock');
end;

procedure kTask.init(_name: String; _area: kTaskArea; _skill, _minLevel, _maxLevel: Integer;
                     _monster: kMonster; _tree: kTree; _ore: kOre; _bank: kBank);
begin
  self.name := _name;
  self.area := _area;
  self.skill := _skill;
  self.minLevel := _minLevel;
  self.maxLevel := _maxLevel;
  self.monster := _monster;
  self.tree := _tree;
  self.ore := _ore;
  self.bank := _bank;
end;

procedure initTasks()
begin
  fletchNstring.init('Fletch & String', GE, SKILL_FLETCHING, 1, 99, [], [], [], Gray);
  superHeat.init('Super Heat', GE, SKILL_MAGIC, 43, 99, [], [], [], Gray);
  highAlch.init('High Alch', GE, SKILL_MAGIC, 55, 99, [], [], [], Gray);
end;

function kTask.getLevel(): Integer;
begin
  result := tabStats.getSkillLevel(self.skill);
end;

function kTask.levelCheck(): boolean;   //returns true if the players skill levels fall within the range of the task
begin
  Result := false;
  if not (gameTabs.getActiveTab() = TAB_STATS) then
    gameTabs.openTab(TAB_STATS);
  if (self.getLevel() >= self.minLevel) and (self.getLevel() <= maxLevel) then
    exit(true)
  else
    writeLn('Our player does not meet the skill requirements for ', self.name);
end;

function kTask.isOnMap(): Boolean;     //returns true if the player is at the right location for the task
var
  pos: TPoint;
begin
  pos := sps.getPlayerPos();
  if (pos.x <> -1) and (pos.y <> -1) then result := true;
end;

function kTask.teleTo(): Boolean;        //returns true if we successfully teleported to the task area
begin
  case self.lode of
    'Lumbridge': lodestoneScreen.teleportTo(LOCATION_LUMBRIDGE);
    'Varrock': lodestoneScreen.teleportTo(LOCATION_VARROCK);
    'Edgeville': lodestoneScreen.teleportTo(LOCATION_EDGEVILLE);
    'Burthorpe': lodestoneScreen.teleportTo(LOCATION_BURTHORPE);
    'Taverly': lodestoneScreen.teleportTo(LOCATION_TAVERLEY);
    'Draynor': lodestoneScreen.teleportTo(LOCATION_DRAYNOR_VILLAGE);
    'Karamja': lodestoneScreen.teleportTo(LOCATION_KARAMJA);
    'Falador': lodestoneScreen.teleportTo(LOCATION_FALADOR);
    'Al Kharid': lodestoneScreen.teleportTo(LOCATION_AL_KHARID);
    'Port Sarim': lodestoneScreen.teleportTo(LOCATION_PORT_SARIM);
  end;
  wait(10000 + random(5000));
  Result := self.isOnMap();
end;

procedure kTask.randomLocation()    //moves player to random(high(task.location))
begin

  //if not self.isOnMap then self.teleTo();

  sps.blindWalk(self.location[random(high(self.location))]);        //walk to a random point on ttask.location array
end;

function kTask.goToObject(obj: integer): boolean;
begin
  OSD.status.update(['Walking to Task Location...']);
  OSD.refresh();
  if SPS.walkPath(self.area.toObject[obj], true) then
    exit(true);
end;

function kTask.goToBank(): boolean;
begin
  OSD.status.update(['Walking to Bank...']);
  OSD.refresh();
  if SPS.walkPath(self.area.toBank, true) then
    exit(true);
end;

procedure kTask.bank(isPreset, tele: Boolean; preset: Integer)
var
  failTimer: TTimeMarker;

begin
  OSD.status.update(['Banking...']);
  OSD.refresh();
  if not SPS.isInPolygon(self.area.bankLoc) then
  begin
    case tele of
      false: self.goToBank();
      true: begin
        self.teleTo();
        self.goToBank();
      end;
    end;
  end;

  wait(randomRange(1200,1300));

  failTimer.reset();
  failTimer.start();

  repeat
    if bankScreen.isOpen() then break;
    if self.bank.find() then
      minimap.waitPlayerMoving();
    repeat
      wait(randomRange(600,700));
    until bankScreen.isOpen() or (failTimer.getTime() > 1800);
  until bankScreen.isOpen() or (failTimer.getTime() > 60000);

  if failTimer.getTime() > 60000 then begin
    writeLn('Couldnt find the bank!');
    writeLn('Terminating Script!');
    terminateScript();
  end;

  failTimer.reset();

  if preset = 0 then preset := (1 + random(2));

  case isPreset of
    false: begin
      wait(randomRange(250,500));
      bankScreen.quickDeposit(QUICK_DEPOSIT_INVENTORY);
      smallRandomMouse();
      wait(randomRange(500,750));
      if bankScreen.isOpen() then
        bankScreen.close();
    end;
    true: begin
      bankPreset(preset);
      writeLn('Withdrawing Bank Preset: ', toStr(preset));
    end;
  end;
  wait(randomRange(600,800));
  if options.isOpen() then
    pressKey(27);
end;

function kTask.isReady(): Boolean;              //returns true/false if char is ready to do a task
begin
  if not self.levelCheck() then
  begin
    writeLn('We do not meet the level requirements for ', self.name, 'task.');
    exit(false);
  end;
  if not self.isOnMap() then
  begin
    writeLn('We are not in the correct area for ', self.name, 'task.');
    exit(false);
  end;
  result := true;
end;

function kTask.doCombatTask(): boolean;
begin                                           //NO NAVIGATION SUPPORTED AT THIS TIME
  if not self.isOnMap() then exit(false);
  if kCombatMgr.healthCheck() then
    if kCombatMgr.fight() then
      exit(true);
end;

procedure kTask.doGatheringTask();
var
  count: integer;
  failTimer: TTimeMarker;

begin
  writeLn('Starting Gathering Task: ', self.gameObject.name);
  if not self.isOnMap() then exit;
  if not SPS.isInPolygon(self.area.gatherLoc) then
    SPS.walkPath(self.area.toGather, true);
  repeat
    count := tabBackpack.count();
    failTimer.reset();
    failTimer.start();
    if self.gameObject.find(false) then
      repeat
        if tabBackpack.isFull() then exit;
        case random(100) of
          0..84: sleepAndMoveMouse(randomRange(250,550));
          85: begin
                    tabStats.open();
                    mouseBox(tabStats.getSkillBox(self.skill), MOUSE_MOVE);
                    wait(randomRange(1000,1500));
                    tabBackpack.open();
                  end;
          86..99: begin
                    self.gameObject.find(true);
                    smallRandomMouse();
                  end;
        end;
      until (tabBackpack.count() > count) or (failTimer.getTime() > 30000);
  until tabBackpack.isFull();
  failTimer.reset();
end;

procedure kTask.doTask();
begin

end;

function setupTasks(): array of kTask;
var
  tasks: array of kTask;
begin
  //if kTask.levelCheck() then
    //tasks := (tasks + kTask);


  if length(tasks) < 0 then
  begin
    writeLn('We cant do any tasks!');
    writeLn('Shutting down!');
    terminateScript();
  end;

  result := tasks;
end;
