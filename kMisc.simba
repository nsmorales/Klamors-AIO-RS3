{$include_once SRL-6-SIMBA1.2/SRL.simba}
{$include_once NAS/NAS.simba}

{$f-}

procedure bankPreset(preset: Integer);
var
    x, y: integer;
    failTimer: TTimeMarker;

begin
    if bankScreen.isOpen then
    begin
      failTimer.start();
      repeat
        if (random(4) <> 0) then      //75% chance to use sendkeys for preset
        begin
          wait(randomRange(500,1000));
          sendKeys(toStr(preset), 15+randomRange(50,100), 20+randomRange(25,125))
        end else
        begin                         //25% chance to click preset button
          wait(randomRange(500,1000));
          if bankScreen.clickButton(preset + 2) then
            tabBackpack.waitWhileLocked(randomRange(1000,1500));
        end;
      until not bankScreen.isOpen() or (failTimer.getTime() > 10000);
      if failtimer.getTime() > 10000 then begin
        writeLn('Something went wrong...');
        writeLn('Unable to withdraw preset!');
        writeLn('Terminating Script!');
        terminateScript();
      end;
    end;
end;

procedure makeItemsAntiBan(skill: Integer);
begin
  case random(3) of
    0: wait(randomRange(3000,6500));
    1: if random(16) = 0 then begin
      tabStats.open();
      mouseBox(tabStats.getSkillBox(skill), MOUSE_MOVE);
      wait(randomRange(250,500));
      tabBackpack.open();
    end;
    2: if random(8) = 0 then begin
      case random(4) of
        0: sleepAndMoveMouse(1000 + random(2000));
        1: boredHuman();
        2: mouseOffClient(OFF_CLIENT_RANDOM, randomRange(3000, 8000));
        3: begin
          randomCompass(15, 30, true);
          mainscreen.setAngle(MS_ANGLE_HIGH);
        end;
      end;
    end;
  end;
end;

procedure makeItems()
begin
  case random(10) of
    0..8: productionScreen.clickStart(true);     //90% of the time use spacebar
    9: productionScreen.clickStart(false);
  end;
end;

procedure waitforItems()
begin
  repeat
    wait(randomRange(350,850));
    if random(28) = 0 then makeItemsAntiBan();
  until (not progressScreen.isOpen()) or progressScreen.findButton(PROGRESS_BUTTON_DONE, 500, False)
end;

function randomPoint(area: TPointArray): TPoint;        //returns a gausspoint from area: TPointArray
var
  box: TBox;
begin
  box := area.getBounds();
  result := box.getGaussPoint();
end;

