program kMisc;

{$include_once srl-6/srl.simba}
{$include_once SPS/lib/SPS-RS3.Simba}
{$include_once srl-6/lib/misc/srlplayerform.simba}
{$include_once klamor/kCombat.simba}
{$include_once klamor/kGameObject.simba}
{$include_once klamor/kLoot.simba}
{$include_once klamor/kTask.simba}
{$f-}

const

  REVISION := 1.5;

  T_COMBAT := 0;
  T_PRAYER := 1;
  T_MINING := 2;
  T_CRAFTING := 3;
  T_SMITHING := 4;
  T_FLETCHING := 5;

  FOOD_KEY := 0;
  BURY_KEY := 1;
  FLETCH_KEY := 2;
  STRING_KEY := 4;

  URN_TYPE := 0;
  FLETCH_TYPE := 1;

var

  //INTERFACE-DTMs
  superHeatDTM, highAlchDTM, qpBuffDTM, regenDTM, qpDTM,
  activeqpDTM: Integer;
  //PROGRESS REPORT VARIABLES
  totalKills, loads, totalEXP, expPH: Integer;
  //Loots
  bigBones, lobster, hardClay, softClay, natRune, fireRune, ironOre,
  coalOre, mithrilOre: TLoot;
  //Monsters
  _hillGiant: TMonster;
  //GameObjects
  Bank_Blue, Bank_Gray, Bank_Chest, coal, mithril, vwestIron, vwestclay, barbClay, bvWell,
  bvPotteryWheel, bvPotteryOven, lumbyForge: TGameObject;
  //Tasks
  currentTask, hillGiants, vwClay, bvUrns, vwIron, geFnS, caSmelting: TTask;

procedure initPlayerForm()
begin
  with playerForm do
    begin
      name := 'Klamors AIO v' + toSTR(REVISION);
      checkBoxLabels := ['Combat', 'Prayer', 'Mining', 'Crafting', 'Smithing', 'Fletching'];
      checkBoxDefaults := ['False', 'Falsee', 'True', 'True', 'True', 'True'];
      //checkBoxHints := [];
      editBoxLabels := ['Food Key', 'Bury Key', 'Fletch Key', 'String Key'];
      editBoxDefaults := ['c', 'x', 'x', 'z'];
      //editBoxHints := [];
      comboBoxLabels := ['Urn Type', 'Fletch Type'];
      comboBoxDefaults := ['Regular', 'Shortbow(u)'];
      setLength(comboBoxItems, length(comboBoxLabels));
      comboBoxItems[0] := ['Cracked', 'Fragile', 'Regular', 'Strong', 'Decorated'];
      comboBoxItems[1] := ['ArrowShafts', 'Shortbow(u)', 'Stock', 'Shieldbow(u)'];
    end;
end;

procedure declarePlayers()
begin
  players.setup(playerForm.players);
  currentPlayer := 0;
  players[0].booleans[T_COMBAT] := playerForm.players[0].settings[0];
  players[0].booleans[T_PRAYER] := playerForm.players[0].settings[1];
  players[0].booleans[T_MINING] := playerForm.players[0].settings[2];
  players[0].booleans[T_CRAFTING] := playerForm.players[0].settings[3];
  players[0].booleans[T_SMITHING] := playerForm.players[0].settings[4];
  players[0].booleans[T_FLETCHING] := playerForm.players[0].settings[5];

  players[0].strings[FOOD_KEY] := playerForm.players[0].settings[6];
  players[0].strings[BURY_KEY] := playerForm.players[0].settings[7];
  players[0].strings[FLETCH_KEY] := playerForm.players[0].settings[8];
  players[0].strings[STRING_KEY] := playerForm.players[0].settings[9];

  players[0].strings[URN_TYPE] := playerForm.players[0].settings[10];
  players[0].strings[FLETCH_TYPE] := playerForm.players[0].settings[11];
end;

procedure loginPlayer()
begin
  players[currentPlayer].login();
  wait(randomRange(1800, random(1800)));
  closePopup();
  conversationBox.continue(True, True);
  exitTreasure();
  wait(600 + random(1200));
  minimap.clickCompass();
end;

procedure initDTMs()
begin
  qpBuffDTM := DTMFromString('m6wAAAHic42ZgYIhiZGDwg+IwII4H4gwgzgHiLCBOYYSoCQDiXUC8E4gPAfFJJHwYiLcB8Vok/G6tN0PUNEmisCTQHTDMSgAzkoCRAAC4Thjn');
  qpDTM := DTMFromString('m6wAAAHic42ZgYDBgZGCwAmJLIDYEYi0gVoNiEFsPiE2haqYD8WQgngDE3UDcC8QTgXgWEM8D4vlQeiYQ33v/k8E/IZ0hJreUoaihnSGnuonBPSiCwdEnmME3Mo7B2NCNwcrZm8E1OIpBEugOGGYlgBlJwEgAAKreFlc=');
  activeQpDTM := DTMFromString('mrAAAAHic42BgYDBgZGCwBmILINYHYnUg1oCyTYF4BhBPA+IJQNwDxJOAeA4QL4DS997/ZIiwXc2Q5nYEiA+D2UE2kxhiPKcwxHrNZJAE2sGKBzMSwDAAAHC3ElQ=');
  regenDTM := DTMFromString('mbQAAAHicY2VgYHAEYmcgtgdiayB2BeLJjAwMPVA8C4jnAvEHPzUGExVlBmMDYwZ3ZSUGB0UFBkkGTMCIBYMBAC0bB9A=');
end;

procedure initLoots()
begin

  lobster.init('Lobster', ['obster'], [], DTMFromString('mggAAAHicY2NgYIhgYmBIBOIoIPZjgvATgJgHiNmAmBWI+YFYAoiFgfhIkgxQFxMWjB0w4sAQAACBZwPb'));
  hardClay.init('Clay', ['lay'], [], DTMFromString('mbQAAAHicY2VgYAhlYmCIA+JYIA4A4iAgjmRkYIgC4mAgDgfiGCDuKvEFqmZCw5iAEQsGAwCGLgTY'));
  softClay.init('Soft Clay', ['oft', 'clay'], [], DTMFromString('mggAAAHicY2NgYAhnYmBIZ4LQfkAcDMQJQBzKyMAQAsQ+jBB2IhDHA3GwDQ9QFxMWjB0w4sAQAADp/QTk'));
  natRune.init('Nature Rune', ['ature', 'rune'], [], DTMFromString('mlwAAAHicY2dgYAhnYmCIAOIAKI4F4iQgjgdiTiAWBmIeIGYF4v+MDAxcQFoAiAVrRRhiIiLAODcjg2H5ggUMLXV1DMV5eQz4ACMeDAUAcvoMig=='));
  fireRune.init('Fire Rune', ['ire', 'rune'], [], DTMFromString('mggAAAHicY2NgYGhiYmDoAuJeIO4A4nogrgRiLiBmhNLCUAxiz1IQY1i+YAHDxO4uhsyUFIZAPz+GuKgoBlyAEQeGAACM2gsQ'));
  ironOre.init('Iron Ore', ['ron', 'ore'], [], 1);

  //bones
    //dragonBones.init('Dragon Bones', ['ake', 'dragon', 'bones'], [[12698835, 5, [2, [0.93, 0.45, 0.00]]], [12106698, 5, [2, [0.31, 0.64, 0.00]]]]);
    bigBones.init('Big Bones', ['ake', 'Big', 'Bones'], [[12501716, 10, [2, [0.35, 1.09, 0.00]]], [12501973, 10, [2, [0.36, 1.18, 0.00]]]], DTMFromString('mlwAAAHicY2dgYGhiYmDoBOIWIG4A4logrgfiViAOYWRgCAbiACAOAuJQII4C4mggnjFxIlA3Ew6MGzDiwVAAAIf4B80='));
  //coins
    //coins.init('Coins', ['ake', 'coins'], [[2268333, 5, [2, [0.22, 0.16, 0.00]]], [2536378, 5, [2, [0.76, 0.45, 0.00]]]]);
    //coins2.init('Coins', ['ake', 'coins'], [[3442584, 8, [2, [0.17, 2.21, 0.00]]], [3442584, 8, [2, [0.17, 2.21, 0.00]]]]);
  //runes
    //bloodRune.init('Blood runes', ['ake', 'Blood', 'rune'], [[9672353, 4, [2, [0.25, 0.36, 0.00]]], [9935269, 2, [2, [0.60, 0.41, 0.00]]]]);
    //fireRune.init('Fire Rune', ['ake', 'Fire', 'rune'], [[9409949, 5, [2, [0.15, 0.25, 0.00]]], [6259892, 10, [2, [0.10, 3.08, 0.00]]]]);
    //air runes
    //lawRune.init('Law Rune', ['ake', 'Law', 'rune'], [[9804195, 4, [2, [0.20, 0.30, 0.00]]], [13068240, 4, [2, [5.20, 11.81, 0.00]]]]);
  //consumables
    //cake.init('Cake', ['ake'], [[932170, 2, [2, [0.36, 0.76, 0.00]]], [932168, 1, [2, [0.37, 1.61, 0.00]]]]);
  //equipment
    //adamantJavelin.init('Adamant Javelin', ['ake', 'Adamant', 'javelin'], [[5992788, 17, [2, [0.07, 0.11, 0.00]]], [6058324, 17, [2, [0.07, 0.11, 0.00]]]]);
    //adamantDarts.init('Adamant Darts', ['ake', ''], [[x, 5, [2, [x, x, 0.00]]], [x, 5, [2, [x, x, 0.00]]]]);
    //runeLongsword.init('Rune Longsword', ['ake', ''], [[x, 5, [2, [x, x, 0.00]]], [x, 5, [2, [x, x, 0.00]]]]);
    //runeDagger.init('Rune Dagger', ['ake', ''], [[x, 5, [2, [x, x, 0.00]]], [x, 5, [2, [x, x, 0.00]]]]);
    //mithrilHatchet.init('Mithril Hatchet', ['ake', ''], [[x, 5, [2, [x, x, 0.00]]], [x, 5, [2, [x, x, 0.00]]]]);
    //mithril 2h sword
    //mithril kiteshield
  //task items
    //blackdhides.init('Black Dragonhide', ['ake', 'black', 'dragonhide'], [[1908256, 5, [2, [1.11, 0.22, 0.00]]], [2631981, 5, [2, [3.33, 1.23, 0.00]]]]);
    //bluedhides.init('Blue Dragonhide', ['ake', 'dragonhide'], [[x, 5, [2, [x, x, 0.00]]], [x, 5, [2, [x, x, 0.00]]]]);
    //adamantBar.init('Adamant Bar', ['ake', 'Adamant', 'bar'], [[4215616, 1, [2, [0.00, 0.18, 0.00]]], [4018237, 2, [2, [0.00, 0.36, 0.00]]]]);
end;

procedure freeLootDTMs()
begin
  FreeDTM(lobster.invDTM);
  FreeDTM(hardClay.invDTM);
  FreeDTM(softClay.invDTM);
  FreeDTM(natRune.invDTM);
  FreeDTM(fireRune.invDTM);
  FreeDTM(bigBones.invDTM);
end;

procedure clearDTMs()
begin
  freeLootDTMs();
  FreeDTM(qpBuffDTM);
  FreeDTM(regenDTM);
  FreeDTM(qpDTM);
  FreeDTM(activeQpDTM);
end;

procedure initMonsters()
begin
  //black_dragon.init('Black Dragon', ['ttack', 'Black', 'dragon']);
  //blue_dragon.init('Blue Dragon', [xxx,yyy], ['ttack', 'lue', 'dragon']);
  //cow.init('Cow', [[x,y], ['ttack', 'cow']);
  //chicken.init('Chicken', ['ttack', 'chicken']);
  _hillGiant.init('Hill-Giant', ['ttack', 'Hill', 'Giant']);
end;

procedure initGameObjects()
begin
  Bank_Blue.init('Banker', ['anker', 'deposit', 'booth'], [[6239302, 11, [2, [0.33, 0.87, 0.00]]], [6239302, 11, [2, [0.33, 0.87, 0.00]]]]);
  Bank_Gray.init('Banker', ['anker'], [[1842987, 7, [2, [13.21, 2.25, 0.00]]], [9999777, 7, [2, [0.41, 0.27, 0.00]]]]);
  lumbyForge.init('Forge', ['melt', 'Furnace'], [[5928058, 8, [2, [0.17, 0.21, 0.00]]], [1257953, 3, [2, [0.11, 1.27, 0.00]]]]);
  Bank_Chest.init('Bank Chest', ['ank', 'chest'], [[10985100, 13, [2, [0.19, 0.52, 0.00]]], [6590393, 6, [2, [0.07, 1.65, 0.00]]]]);
  //Copper.init('Silver',   4,  [174, 174], ['opper'],  [[x, 5, [2, [x, x, 0.00]]], [x, 5, [2, [x, x, 0.00]]]);
  //Tin.init('Silver',   4,  [174, 174], ['in'],  [[x, 5, [2, [x, x, 0.00]]], [x, 5, [2, [x, x, 0.00]]]);
  vwestIron.init('Iron', ['ron'], [[1265008, 2, [2, [0.37, 0.64, 0.00]]], [2242430, 5, [2, [0.07, 0.32, 0.00]]]]);
  vwestClay.init('Clay', ['lay'], [[1265008, 2, [2, [0.37, 0.64, 0.00]]], [9551052, 5, [2, [0.62, 1.34, 0.00]]]]);//CLAY AT VARROCK WEST MINES
  barbClay.init('Clay', ['lay'], [[5673389, 6, [2, [0.12, 0.37, 0.00]]], [10011339, 8, [2, [0.45, 1.39, 0.00]]]]); //CLAY AT BARBARIAN VILLAGE
  bvWell.init('Well', ['ell'], [[5863830, 5, [2, [0.12, 0.45, 0.00]]], [1842469, 2, [2, [1.16, 1.04, 0.00]]]]); //Barbarian Village Well
  bvPotteryWheel.init('Pottery Wheel', ['heel'], [[2510723, 4, [2, [0.10, 0.25, 0.00]]], [10393250, 8, [2, [0.35, 0.21, 0.00]]]]); //Barbarian Village Pottery Wheel
  bvPotteryOven.init('Pottery Oven', ['ven'], [[3822704, 10, [2, [0.08, 0.42, 0.00]]], [4020084, 8, [2, [0.12, 0.39, 0.00]]]]); //Barbarian Village Pottery Oven
  //Silver.init('Silver',   4,  [174, 174], ['ilver'],  [[4808543, 7, [2, [0.14, 0.15, 0.00]]], [11847142, 20, [2, [0.28, 2.50, 0.00]]]]);
  Coal.init('Coal', ['oal'], [[1005427, 5, [2, [0.18, 2.16, 0.00]]], [1579546, 4, [2, [0.00, 0.47, 0.00]]]]);
  Mithril.init('Mithril', ['ithril'], [[1005427, 5, [2, [0.18, 2.16, 0.00]]], [8410966,  15, [2, [0.03, 0.29, 0.00]]]]);
end;

procedure initTasks()
begin           //('name', 'mapName', 'lode', 'bankCol', [toTask], [toBank], [location], [bankLoc], skill, minLevel, maxLevel, item, monster, loot, gameobject)
  //Lumbycows.init('Cows', 'Lumbridge_Map', 'Lumbridge', [[]], ranged, 4, 30);
  //Lumbychickens.init('Chickens', 'Lumbridge_Map', 'Lumbridge', [[]], ranged, 3, 15);
  caSmelting.init('caSmelting', 'Lumbridge_Combat_Academy', 'Lumbridge', 'chest', SKILL_SMITHING, 1, 99,
                  //totask
                  [[[230, 142], [241, 158], [260, 156]],
                  [[229, 145], [240, 157], [250, 159], [260, 158]]],
                  //tobank
                  [[[251, 156], [214, 139]],
                  [[253, 158], [214, 147]],
                  [[253, 158], [214, 151]]],
                  //taskarea
                  [[280, 141], [277, 170], [243, 169], [245, 142]],
                  //bankarea
                  [[198, 133], [202, 161], [236, 161], [233, 131]]);
  geFnS.init('geFnS', 'Grand_Exchange', 'Edgeville', 'gray', SKILL_FLETCHING, 5, 99,
                      //toTask
                      [[[192, 145], [224, 147], [227, 164], [192, 164]],
                      [[192, 145], [224, 147], [227, 164], [192, 164]]],
                      //toBank
                      [[[206, 156], [210, 157], [216, 151], [213, 150], [210, 150], [204, 149],
                      [203, 150], [216, 155]],
                      [[206, 156], [210, 157], [216, 151], [213, 150], [210, 150], [204, 149],
                      [203, 150], [216, 155]]],
                      //location
                      [[192, 145], [224, 147], [227, 164], [192, 164]],
                      //banklocation
                      [[192, 145], [224, 147], [227, 164], [192, 164]]);
  vwIron.init('vwIron', 'Varrock_West_Mine', 'Varrock', 'blue', SKILL_MINING, 0, 50,
            //totask
            [[[261, 181], [257, 195], [241, 202], [222, 205], [208, 213], [205, 223],
             [204, 236], [203, 249], [203, 262], [203, 271], [202, 281],
             [202, 293], [202, 307], [201, 323], [205, 335], [210, 347], [216, 357],
             [222, 371], [225, 389], [227, 407], [229, 420], [233, 433],
             [234, 442], [228, 450]],
             [[260, 185], [257, 197], [245, 205], [238, 225], [197, 245], [188, 266],
             [187, 289], [184, 319], [189, 341], [200, 370], [202, 395],
             [204, 420], [234, 449]]],
             //toBank PATHS
             [[[225, 417], [214, 402], [206, 390], [199, 374], [196, 360], [195, 345],
              [197, 327], [198, 308], [199, 288], [202, 268], [203, 250],
              [204, 231], [205, 216], [219, 205], [237, 203], [253, 201], [262, 186],
              [262, 179], [262, 175]],
              [[212, 423], [204, 408], [213, 378], [197, 352], [174, 329], [191, 295],
              [181, 261], [197, 226], [236, 203], [263, 177]]],
            //mine area
            [[203, 441], [202, 480], [252, 455], [241, 410]],
            //bank area
            [[235, 128], [232, 192], [297, 194], [301, 132]]);
  hillGiants.init('Hill-Giant', 'Edgeville_Dungeon', 'Edgeville', 'blue', SKILL_MAGIC, 40, 50,
           //toTask
           [
           ],
           //toBank
           [{N/A}],
           //SPSAREA
           [[176, 113], [145, 130], [123, 149], [113, 173], [109, 199], [115, 217],
           [131, 229], [147, 229], [171, 221], [185, 192], [212, 171], [231, 158], [226, 137], [206, 120]],
           //bank area
           []);
  vwClay.init('vwClay', 'Varrock_West_Mine', 'Varrock', 'blue', SKILL_MINING, 5, 30,
           //toTask PATHS
           [[[261, 181], [257, 195], [241, 202], [222, 205], [208, 213], [205, 223],
           [204, 236], [203, 249], [203, 262], [203, 271], [202, 281],
           [202, 293], [202, 307], [201, 323], [205, 335], [210, 347], [216, 357],
           [222, 371], [225, 389], [227, 407], [229, 420], [233, 433],
           [234, 442], [228, 450]],
           [[260, 185], [257, 197], [245, 205], [238, 225], [197, 245], [188, 266],
           [187, 289], [184, 319], [189, 341], [200, 370], [202, 395],
           [204, 420], [234, 449]]],
           //toBank PATHS
           [[[236, 436], [229, 416], [219, 391], [216, 376], [208, 360], [200, 342],
           [199, 309], [202, 284], [203, 262], [204, 236], [210, 209],
           [224, 206], [243, 203], [259, 200], [262, 183], [269, 173]],
           [[231, 442], [231, 418], [219, 401], [204, 372], [194, 348], [192, 317],
           [193, 285], [198, 251], [200, 222], [215, 203], [234, 200],
           [260, 200], [261, 173]]],
           //SPSAREA
           [[232, 411], [229, 422], [228, 431], [220, 443], [210, 449], [218, 458],
           [228, 459], [241, 450], [242, 437], [243, 420], [238, 412]],
           //bank area
           [[241, 129], [240, 191], [288, 192], [292, 132]]);
  bvUrns.init('bvUrns', 'Edgeville_Barbarian_Village', 'Edgeville', 'blue', SKILL_CRAFTING, 1, 99,
              //toTask
              [ //toClay
                [[290, 220], [264, 238], [236, 256], [230, 286], [228, 320], [258, 364],
                 [259, 389], [259, 413], [262, 446], [264, 479], [254, 511],
                 [254, 536], [236, 588]],
                [[289, 221], [268, 239], [241, 253], [230, 291], [224, 331], [205, 369],
                 [196, 407], [194, 438], [192, 471], [196, 515], [208, 560], [234, 586]],
                //toWell
                [[235, 578], [224, 573], [211, 569], [203, 557], [197, 551], [190, 542],
                 [190, 530], [190, 516], [208, 509], [209, 495]],
                [[232, 576], [247, 569], [227, 558], [227, 542], [233, 527], [224, 516],
                 [214, 504], [209, 497]],
                //toPotteryRoom
                [[209, 497], [212, 507], [221, 509], [230, 515], [245, 519], [248, 527], [248, 546]],
                [[209, 500], [215, 513], [227, 521], [241, 525], [244, 543], [247, 551]]],
              //toBank
              [[[245, 546], [242, 531], [248, 516], [251, 503], [253, 489], [265, 479],
               [266, 459], [266, 440], [265, 428], [265, 413], [265, 396],
               [265, 384], [265, 374], [263, 360], [263, 351], [250, 342], [232, 336],
               [229, 318], [230, 300], [232, 278], [233, 260], [244, 248],
               [251, 239], [266, 231], [286, 228]],
              [[242, 542], [245, 528], [250, 515], [250, 495], [250, 486], [265, 473],
               [272, 452], [274, 438], [278, 420], [283, 395], [286, 383],
               [290, 363], [302, 351], [313, 326], [308, 297], [311, 276], [313, 257],
               [290, 249], [266, 240], [284, 224], [290, 218]]],
              //miningArea
              [[232, 570], [239, 575], [247, 581], [242, 593], [229, 594], [223, 585], [223, 575]],
              //bank area
              [[290, 230], [290, 220], [289, 209], [297, 203], [296, 212], [296, 222],
              [285, 228], [286, 215], [295, 228], [296, 218]]);
end;


procedure makeItemsAntiBan()
begin
  case random(3) of
    0: wait(randomRange(3000,6500));
    1: if random(16) = 0 then begin
      tabStats.open();
      mouseBox(tabStats.getSkillBox(bvUrns.skill), MOUSE_MOVE);
      wait(randomRange(250,500));
      tabBackpack.open();
    end;
    2: if random(8) = 0 then begin
      case random(4) of
        0: sleepAndMoveMouse(1000 + random(2000));
        1: boredHuman();
        2: mouseOffClient(OFF_CLIENT_RANDOM, randomRange(3000, 8000));
        3: begin
          randomCompass(15, 30, true);
          mainscreen.setAngle(MS_ANGLE_HIGH);
        end;
      end;
    end;
  end;
end;

procedure regen();                   //activates regeneration via clicking regenDTM (regen button on actionbar)
var x, y: integer;
begin
    writeLn('Activating regeneration!');
    wait(randomRange(250,350));
    if findDTM(regenDTM, x, y, actionbar.getBounds()) then
        mouse(x, y, 3, 3, MOUSE_LEFT);
    wait(randomRange(150,250));
end;

procedure actionBarNumber(skill: integer);    //activates ability skill via sendkeys
begin
  sendKeys(toStr(skill), 15+randomRange(50,100), 20+randomRange(25,125));
  wait(250 + random(500));
end;

procedure actionBarChar(skill: string);    //activates ability skill via sendkeys
begin
  sendKeys(skill, 15+randomRange(50,100), 20+randomRange(25,125));
  wait(250 + random(500));
end;

function activeQP(): boolean;         //returns true if we find (protect magic?) buffDTM within the actionbar
var                                   //requires moving buffs into slots 10-14 of the actionbar
    x, y: integer;
begin
    if findDTM(qpBuffDTM, x, y, actionBar.getBounds()) then result := true;
    wait(randomRange(250,500));
end;

procedure prayersOn();                //activates quick prayers via clicking qpDTM (quick prayer button on actionbar)
var
    x, y: integer;
begin
    if not players[currentPlayer].booleans[QPRAY] then exit;
    wait(randomRange(250,350));
    if not activeQP() then begin
    writeLn('Turning Quick Prayers On');
    if findDTM(qpDTM, x, y, actionbar.getBounds()) then
       mouse(x, y, 3, 3, MOUSE_LEFT);
    wait(randomRange(150,250));
    end;
end;

procedure prayersOff();               //de-activates quick prayers via clicking qpDTM (quick prayer button on actionbar)
var
    x, y: integer;
begin
    wait(randomRange(250,350));
    if activeQP() then begin
    writeLn('Turning Quick Prayers Off');
    if findDTM(activeQpDTM, x, y, actionbar.getBounds()) then
       mouse(x, y, 3, 3, MOUSE_LEFT);
    wait(randomRange(150,250));
    end;
end;

procedure healthCheck();
var
  actionBar: TRSActionbar;
  HP, bHP: Integer;
begin
  HP := actionBar.getHPPercent();
  if (HP < players[currentPlayer].integers[HP_TOQUIT]) then
  begin
    if players[currentPlayer].booleans[DEBUG] then
    begin
      writeLn('Player HP is less than ', players[currentPlayer].integers[HP_TOQUIT], '%!');
      writeLn('Logging out...');
    end;
    players[currentPlayer].logout();
    terminateScript();
  end else

  if (HP < players[currentPlayer].integers[HP_TOEAT]) then
  begin
    if players[currentPlayer].booleans[DEBUG] then
      writeLn('Player HP is less than ', players[currentPlayer].integers[HP_TOEAT], '%!');
    lobster.eat();
  end else

  if (HP < players[currentPlayer].integers[HP_TOREGEN]) then
  begin
    if players[currentPlayer].booleans[DEBUG] then
      writeLn('Player HP is less than ', players[currentPlayer].integers[HP_TOREGEN], '%!');
    regen();
    if targetInfo.hasTarget() then
    repeat
      if random(12) = 0 then actionbarNumber(6 + random(3));
      wait(randomRange(2475,3832));
    until not targetInfo.hasTarget();
    wait(randomRange(5475,7332));
  end;
end;

procedure takeBreak();     //borrowed from mayor :D
var
  time: Integer;
begin           // Just using SRL's built-in 'worked' timer for the break timer
  if (players[currentPlayer].worked.getTime() > players[currentPlayer].integers[TILL_BREAK]) then
  begin
    time := round(players[currentPlayer].integers[BREAK_VAR] * 0.1); // Add +/- 10% to break time
    time := players[currentPlayer].integers[BREAK_VAR] + random(-time, time);
    writeLn('Taking a ' + toStr(round(time / 60000, 2)) + ' minute break');
    players[currentPlayer].exitToLobby();
    mouseOffClient(OFF_CLIENT_RANDOM);
    sleep(time);
    loginPlayer();
    players[currentPlayer].worked.reset();
    players[currentPlayer].worked.start();
  end else
    writeLn('Break Check: False');
end;

procedure bankPreset(preset: Integer);
var
    x, y: integer;
    failTimer: TTimeMarker;

begin
    if bankScreen.isOpen then
    begin
      failTimer.start();
      repeat
        if (random(4) <> 0) then      //75% chance to use sendkeys for preset
        begin
          wait(randomRange(500,1000));
          sendKeys(toStr(preset), 15+randomRange(50,100), 20+randomRange(25,125))
        end else
        begin                         //25% chance to click preset button
          wait(randomRange(500,1000));
          if bankScreen.clickButton(preset + 2) then
            tabBackpack.waitWhileLocked(randomRange(1000,1500));
        end;
      until not bankScreen.isOpen() or (failTimer.getTime() > 10000);
      if failtimer.getTime() > 10000 then begin
        writeLn('Something went wrong...');
        writeLn('Unable to withdraw preset!');
        writeLn('Logging out..');
        players[currentPlayer].exitToLobby();
        terminateScript();
      end;
    end;
end;

procedure makeItems()
begin
  case random(10) of
    0..8: productionScreen.clickStart(true);     //90% of the time use spacebar
    9: productionScreen.clickStart(false);
  end;
end;

procedure waitforItems()
begin
  repeat
    wait(randomRange(350,850));
    if random(28) = 0 then makeItemsAntiBan();
  until (not progressScreen.isOpen()) or progressScreen.findButton(PROGRESS_BUTTON_DONE, 500, False)
end;

procedure progress();            //borrowed some things from The Mayor again
begin
  clearDebug();
  writeLn('|=========================================|');
  writeLn(PadR('|        Klamors AIO v' + toStr(REVISION), 42) + '|');
  writeLn(PadR('| Worked: ' + msToTime(players[currentPlayer].worked.getTime(), TIME_ABBREV), 42) + '|');
  case currentTask.name of
    'geFnS': begin
      writeLn(PadR('| ' + toStr(players[currentPlayer].strings[FLETCH_TYPE]) + 's Made: ' + toStr(loads * 14), 42) + '|');
      writeLn(PadR('| ' + toStr(players[currentPlayer].strings[FLETCH_TYPE]) + 's/HR: ' + toStr(round((loads * 14 * 60) / (players[currentPlayer].worked.getTime() / 60000))), 42) + '|');
    end;
    'bvUrns': begin
      //writeLn(PadR('| Urn Skill Type: ' + toStr(oreMined) + ' (' + toStr(orePerHour) + ' PH)', 42) + '|');
      writeLn(PadR('| Urn Type: ' + toStr(players[currentPlayer].strings[URN_TYPE]), 42) + '|');
      writeLn(PadR('| Urns Made: ' + toStr(loads * 14), 42) + '|');
      writeLn(PadR('| Urns/HR: ' + toStr(round((loads * 14 * 60) / (players[currentPlayer].worked.getTime() / 60000))), 42) + '|');
    end;
    'vwIron': begin
      writeLn(PadR('| Iron Mined: ' + toStr(loads * 26), 42) + '|');
      writeLn(PadR('| Iron/HR: ' + toStr(round((loads * 26 * 60) / (players[currentPlayer].worked.getTime() / 60000))), 42) + '|');
    end;
    'vwClay': begin
      writeLn(PadR('| Clay Mined: ' + toStr(loads * 28), 42) + '|');
      writeLn(PadR('| Clay/HR: ' + toStr(round((loads * 28 * 60) / (players[currentPlayer].worked.getTime() / 60000))), 42) + '|');
    end;
    'hillGiants': begin
      writeLn(PadR('| Hill-Giants Killed: ' + toStr(totalKills), 42) + '|');
      writeLn(PadR('| Kills/HR: ' + toStr(round((totalKills * 60) / (players[currentPlayer].worked.getTime() / 60000))), 42) + '|');
    end;
  end;
  writeLn(PadR('| Break in: ' + msToTime(players[currentPlayer].integers[TILL_BREAK] - players[currentPlayer].worked.getTime(), TIME_ABBREV), 42) + '|');
  writeLn('|=========================================|');
end;

procedure caSmelt(preset: Integer)           //make sure your preset has a full backpack!
var
  failTimer: TTimeMarker;

begin
  mainscreen.setAngle(MS_ANGLE_HIGH);
  case tabBackpack.isFull() of
    true: begin
      caSmelting.goToTask(random(2), caSmelting.location);

      failTimer.reset();
      failTimer.start();
      repeat
        if caSmelting.gameObject.find(false) then
          minimap.waitPlayerMoving();
      until productionScreen.isOpen() or (failTimer.getTime() > 60000);
      failTimer.reset();
      makeItems();
      waitForItems();
    end;
    false: begin
      caSmelting.bank(true, false, 2);
      wait(randomRange(600,800));
      if tabBackpack.isFull() then
        inc(loads)
      else begin
        writeLn('Something went wrong...');
        writeLn('We didnt withdraw a full inventory!!');
        writeLn('Logging out...');
        players[currentPlayer].exitToLobby();
        terminateScript();
      end;
      progress();
    end;
  end;
end;

procedure geFletchNString(preset: Integer)
var
  failTimer: TTImeMarker;
  box: Integer;
begin
  wait(randomRange(600,800));
  case tabBackpack.isFull() of
    true: begin
      failTimer.start();
      repeat
        if productionScreen.isOpen() or toolScreen.isOpen() then break;
        if failTimer.getTime() > 15000 then begin
          writeLn('Something went wrong...');
          writeLn('Production Screen isnt open!');
          writeLn('Logging out...');
          players[currentPlayer].exitToLobby();
          terminateScript();
        end;
        actionBarChar('x');
        wait(randomRange(250,500));
      until productionScreen.isOpen() or toolScreen.isOpen();
      failTimer.reset();

      if toolScreen.isOpen() then toolScreen.select('Knife');

      case players[currentPlayer].strings[FLETCH_TYPE] of
        'ArrowShafts': box := 1;
        'Shortbow(u)': box := 2;
        'Stock': box := 3;
        'Shieldbow(u)': box := 4;
      end;

      failTimer.start();
      repeat
        if productionScreen.isOpen() then break;
        if failTimer.getTime() > 15000 then begin
          writeLn('Something went wrong...');
          writeLn('Fletching Menu isnt open!');
          writeLn('Logging out...');
          players[currentPlayer].exitToLobby();
          terminateScript();
        end;
        actionBarChar('x');
        wait(randomRange(250,500));
      until productionScreen.isOpen() or toolScreen.isOpen();
      failTimer.reset();

      if not productionscreen.selectBox(box) then begin
        writeln('PlayerForm: Fletch Type is invalid!');
        writeLn('Logging off...');
        players[currentPlayer].logout();
        terminateScript();
      end;

      makeItems();
      waitforItems();

      if players[currentPlayer].strings[FLETCH_TYPE] = 'ArrowShafts' then exit;

      failTimer.start();
      repeat
        if productionScreen.isOpen() then break;
        if failTimer.getTime() > 15000 then begin
          writeLn('Something went wrong...');
          writeLn('Production Screen isnt open!');
          writeLn('Logging out...');
          players[currentPlayer].exitToLobby();
          terminateScript();
        end;
        actionBarChar('z');
        wait(randomRange(250,500));
      until productionScreen.isOpen();
      failTimer.reset();

      makeItems();
      waitforItems();
    end;
    false: begin
      wait(randomRange(600,800));
      geFnS.bank(true, false, preset);
      if tabBackpack.isFull() then
        inc(loads)
      else begin
        writeLn('Were out of Items to Fletch!');
        writeLn('Logging Out...');
        players[currentPlayer].exitToLobby();
        terminateScript();
      end;
      progress();
    end;
  end;
end;

procedure barbVillageUrns()
var
  box, x, y, i: Integer;
  oven, wheel: TTimeMarker;
  bankLoc, wellLoc, wheelLoc, mineLoc: TPointArray;
  lodeToBank: T2DPointArray;

begin

  bankLoc := [[279, 194], [275, 239], [307, 241], [309, 196]];
  wellLoc := [[195, 485], [195, 500], [214, 498], [217, 483]];
  wheelLoc := [[260, 538], [231, 535], [228, 569], [261, 565]];
  mineLoc := [[221, 580], [224, 602], [249, 600], [248, 578]];
  lodeToBank := [[[203, 179], [217, 185], [227, 189], [240, 193], [252, 202], [264, 218],
                 [272, 230], [289, 230], [290, 219]],
                 [[206, 177], [223, 181], [242, 185], [263, 190], [279, 190], [290, 202], [293, 209]]];

  case players[currentPlayer].strings[URN_TYPE] of
    'Cracked': box := 1;
    'Fragile': box := 2;
    'Regular': box := 3;
    'Strong': box := 4;
    'Decorated': box := 5;
  end;

  mainscreen.setAngle(MS_ANGLE_HIGH);

  bvUrns.goToTask(random(2), bvUrns.location);
  bvUrns.doGatheringTask();

  i := tabBackpack.countDTM(hardClay.invDTM);
  if (i <> 28) then begin
      writeLn('We couldnt manage to mine any clay!');
      writeLn('Logging off...');
      players[currentPlayer].logout();
      terminateScript();
  end;

  bvUrns.goToTask(2 + random(2), wellLoc);      //walk to barbarian village well

  repeat
    if not tabBackpack.isOpen() then
      gameTabs.openTab(TAB_BACKPACK);
    if findDTM(hardClay.invDTM, x, y, tabBackpack.getBounds()) then begin
      mouse(x, y, 3, 3, MOUSE_LEFT);
      if bvWell.find(false) then
        minimap.waitPlayerMoving();
      wait(randomRange(500,750));
    end;
  until productionScreen.isOpen();

  makeItems();
  waitforItems();

  bvUrns.goToTask(4 + random(2), wheelLoc);        //walk to pottery wheels

  repeat
    if bvPotteryWheel.find(false) then
      minimap.waitPlayerMoving();
    wait(randomRange(500,750));
  until productionScreen.isOpen();

  if not productionscreen.selectBox(box) then begin
    writeln('PlayerForm: Urn Type is invalid!');
    writeLn('Logging off...');
    players[currentPlayer].logout();
    terminateScript();
  end;

  makeItems();
  waitforItems();

  repeat
    if bvPotteryOven.find(false) then
      minimap.waitPlayerMoving();
    wait(randomRange(500,750));
  until productionScreen.isOpen();

  makeItems();
  waitforItems();

  case random(100) of                            //make empty presets for this!!!!
    0..19: bvUrns.bank(true, false, 0);
    20..29: bvUrns.bank(false, false, 0);
    30..49: bvUrns.bank(false, true, 0);
    50..99: bvUrns.bank(true, true, 0);
  end;

  inc(loads);
  progress();
end;

procedure varrockWestClay()
begin
  case tabBackpack.isFull() of
    false: vwClay.doGatheringTask();
    true: begin
      vwClay.bank(true, false, 2);
      if not tabBackpack.isFull() then inc(loads);
      progress();
    end;
  end;
end;

procedure varrockWestIron()
begin
  mainscreen.setAngle(MS_ANGLE_HIGH);
  case tabBackpack.isFull() of
    false: vwIron.doGatheringTask();
    true: begin
      vwIron.bank(true, false, 1);
      if not tabBackpack.isFull() then inc(loads);
      progress();
    end;
  end;
end;

procedure edgevilleDungeonHillGiants()
begin
  repeat
    hillGiants.doCombatTask();
  until tabBackpack.isFull() or not hillGiants.levelCheck();
end;

function setupTasks(): Boolean;
var
  tasks: array of TTask;
  x, next: integer;

begin
  if players[currentPlayer].booleans[DEBUG] then
    writeLn('Initiating tasks...');

  //add all known tasks here, but make sure they fall within our skill level
  //tasks = (tasks + *inster-task-here*);
  if hillGiants.levelCheck() then
    tasks := (tasks + hillGiants);
  if vwClay.levelCheck() then
    tasks := (tasks + vwClay);
  if bvUrns.levelCheck() then
    tasks := (tasks + bvUrns);
  if vwIron.levelCheck() then
    tasks := (tasks + vwIron);
  if geFnS.levelCheck() then
    tasks := (tasks + geFnS);
  if caSmelting.levelCheck() then
  tasks := (tasks + caSmelting);

  if length(tasks) < 0 then
  begin
    if players[currentPlayer].booleans[DEBUG] then
    begin
      writeLn('We cant do any tasks!');
      writeLn('Shutting down!');
    end;
    exit(false);
  end;

  //set our current task to be the lowest of all task's skill levels
  currentTask := tasks[0];
  for x := 1 to high(tasks) do
  begin
    if (currentTask.getLevel() > tasks[x].getLevel()) then
      currentTask := tasks[x];
  end;

  //TEST TASK HERE
  currentTask := caSmelting;

  if players[currentPlayer].booleans[DEBUG] then
    writeLn('Current task: ', currentTask.name);

  sps.setup(currentTask.mapName, RUNESCAPE_OTHER);

  result := true;
end;

procedure setupScript()
begin
  clearDebug();

  //ADD UPDATER HERE

  initPlayerForm();
  runPlayerForm();
  if not playerForm.isScriptReady then exit();
  declarePlayers();

  initDTMs();
  initLoots();
  initMonsters();
  initGameObjects();
  initTasks();
  addOnTerminate('clearDTMs');

  disableSRLDebug := true;
  smartEnableDrawing := true;
  smartShowConsole :=  false;
  setupSRL();

  if not isLoggedIn() then
    loginPlayer();

end;

procedure gitGud()
begin
  setupScript();

  if setupTasks() then
    begin
      players[currentPlayer].worked.start();
      loads := 0;
      repeat
        currentTask.doTask();
        takeBreak();
      until loads > 100;
    end;

end;
