program kPlayerManager;

//
//  kPlayerManager.simba
//  Author: Klamor
//  Date: 27 January 2018
//

{$include_once SRL-6-SIMBA1.2/SRL.simba}
{$include_once Klamor/kOnScreenDisplay.simba}
{$include_once Klamor/kTask.simba}
{$include_once Klamor/kExpTracker.simba}
{$f-}

type
  kPlayerManager = record
    skillsToTrain   : array[0..(SKILL_COUNT - 1)] of boolean;
    tasks           : array of kTask;
    currentTask     : kTask;
    breakTimer      : TTimeMarker;
    minsTilBreak    : Integer;
    breakFor        : Integer;
    breakVar        : Integer;
  end;

var
  PlayerMgr: kPlayerManager;

procedure kPlayerManager.init(_minsTilBreak, _breakFor, _breakVar: Integer);
var
  availableTasks: array of kTask;
  x: Integer;
begin
  availableTasks := setupTasks();
  for x := 0 to high(availableTasks) do
    if self.skillsToTrain[availableTasks[x].skill] then
      self.tasks := self.tasks + availableTasks[x];
  self.minsTilBreak := _minsTilBreak * 60000;
  self.breakFor := _breakFor * 60000;
  self.breakVar := _breakVar * 60000;
end;

procedure kPlayerManager.setCurrentLowestTask();      //sets the current task to the lowest player skill level of all tasks
var
  x: integer;
begin
  for x := 1 to high(self.tasks) do
    if self.tasks[x].getLevel() < self.tasks[x-1].getLevel() then
      self.currentTask := self.tasks[x];
  SPS.setup(self.currentTask.area.mapName, RUNESCAPE_SURFACE);
end;

procedure kPlayerManager.setCurrentHighestTask();      //sets the current task to the highest player skill level of all tasks
var
  x: integer;
begin
  for x := 1 to high(self.tasks) do
    if self.tasks[x].getLevel() > self.tasks[x-1].getLevel() then
      self.currentTask := self.tasks[x];
  SPS.setup(self.currentTask.area.mapName, RUNESCAPE_SURFACE);
end;

procedure kPlayerManager.setCurrentRandomTask();             //sets the current task to a random task of all available tasks
begin
  self.currentTask := self.tasks[random(length(self.tasks))];
  SPS.setup(self.currentTask.area.mapName, RUNESCAPE_SURFACE);
end;

procedure kPlayerManager.changeTask(task: kTask);        //override current task with a specific task
begin
  self.currentTask := task;
  SPS.setup(self.currentTask.area.mapName, RUNESCAPE_SURFACE);
end;

function kPlayerManager.tilBreak(): Integer;
begin
  result := (self.minsTilBreak - players[currentPlayer].worked.getTime());
end;



function takeBreak(): boolean;     //borrowed from The Mayor's Resource Dungeon Miner
var
  time: Integer;
begin
  result := false;
  if (PlayerMgr.tilBreak() < 0) then
  begin
    time := round(PlayerMgr.breakVar * 0.1); // Add +/- 10% to break time
    time := PlayerMgr.breakFor + random(-time, time);
    OSD.status.update(['Taking a ' + toStr(round(time / 60000, 2)) + ' minute break']);
    mouseOffClient(OFF_CLIENT_RANDOM);
    sleep(time);
    if not isLoggedIn() then
      players[currentPlayer].login();
    players[currentPlayer].worked.reset();
    players[currentPlayer].worked.start();
    exit(true);
  end else
    writeLn('Mins til break: ' + toStr(PlayerMgr.tilBreak()));
end;

function kPlayerManager.setup(): boolean;
begin
  if not isLoggedIn() then
    players[currentPlayer].login()
  else
  begin
    writeLn('Not Logged In!');
    exit(false);
  end;

  OSD.status.update(['Initializing Player Manager...']);
  OSD.refresh();
  self.init(60, 17, 7);       //minsTilBreak - 60 mins, breakFor - 17 mins, breakVar- 7 mins

  OSD.status.update(['Initializing tasks...']);
  OSD.refresh();
  self.setCurrentLowestTask();
  //self.changeTask(task);    //USE THIS FOR TESTING PURPOSES

  self.breakTimer.start();
  players[currentPlayer].worked.start();

  result := true;
end;

procedure kPlayerManager.doMain();
begin
  if not self.setup() then
  begin
    writeLn('Failed to setup Player Manager!');
    writeLn('Terminating Script!');
    terminateScript();
  end;

  repeat
    updateProgress(self.tilBreak());
    takeBreak();
    self.currentTask.doTask();
  until false;
end;
